name: Run Tests
env:
  PIP_CACHE_DIR: .pip
  PYTHONPATH: src
on:
  push:
    paths:
      - ".github/workflows/tests.yml"
      - "examples/**"
      - "tools/build/*"
      - "src/**"
      - "tests/**"
      - "pyproject.toml"
    branches:
      - master
  pull_request:
    branches:
      - master
  release:
    types: ["published"]
jobs:
  py-lint:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      # Run tests in minimal reasonable version of python
      - name: Set Up Python {{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      # Cache dependencies
      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: ./.pip
          key: ${{ runner.os }}-tests-3.10-${{ hashFiles('pyproject.toml') }}

      - name: Upgrade Pip
        run: python -m pip install --upgrade pip

      - name: Install Dependencies
        run: pip install -IU -e .[lint]

      - name: Check Formatting
        run: ruff format --check examples/ src/ tests/ benchmarks/

      - name: Check ruff
        run: ruff check -q examples/ src/ tests/ benchmarks/

      - name: Check Mypy
        run: mypy src/

  rust-test:
    runs-on: ubuntu-24.04
    needs: [build-windows-x86_64]
    env:
      RUST_ARCH: x86_64-unknown-linux-gnu
    steps:
      - name: Setup Environment
        run: |
          echo "CARGO_HOME=${HOME}/.cargo" >> $GITHUB_ENV
          echo "RUSTUP_HOME=${HOME}/.rustup" >> $GITHUB_ENV
          echo "${HOME}/.cargo/bin" >> $GITHUB_PATH

      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Install Rust
        run: ./tools/build/setup-rust.sh

      - name: Install Rust Components
        run: |
          rustup component add rustfmt
          rustup component add clippy

      - name: Check Rust Format
        run: cargo fmt --check

      - name: Run Clippy on tests
        run: cargo clippy --tests

      - name: Run Rust Tests
        run: cargo test

      - name: Run Clippy Tests
        run: cargo clippy

  py-test:
    runs-on: ubuntu-24.04
    needs: [py-lint, rust-test]
    strategy:
      fail-fast: true
      matrix:
        # Run on all supported versions
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13", "3.14.0-rc.2"]
    env:
      RUST_ARCH: x86_64-unknown-linux-gnu
    steps:
      - name: Setup Environment
        run: |
          echo "CARGO_HOME=${HOME}/.cargo" >> $GITHUB_ENV
          echo "RUSTUP_HOME=${HOME}/.rustup" >> $GITHUB_ENV
          echo "${HOME}/.cargo/bin" >> $GITHUB_PATH

      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Set Up Python {{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # Cache dependencies
      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: ./.pip
          key: ${{ runner.os }}-tests-{{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}

      - name: Upgrade Pip
        run: python -m pip install --upgrade pip

      - name: Install Dependencies
        run: pip install -IU -e .[build,test,test-extra]

      - name: Install Rust
        run: ./tools/build/setup-rust.sh

      - name: Build Rust module
        run: python -m pip install --editable .

      - name: Install nginx
        run: ./tools/build/setup-nginx.sh

      - name: Run Tests
        run: coverage run -m pytest -vv tests/

      - name: Coverage Report
        run: coverage report

  # @todo: Move to package.yml
  build-windows-x86_64:
    runs-on: windows-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: "1.89.0"
          default: true
          components: rustfmt, clippy

      - name: Set Up Python {{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==3.1.4

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: "cp39-win_amd64 cp310-win_amd64 cp311-win_amd64 cp312-win_amd64 cp313-win_amd64"
          CIBW_TEST_REQUIRES: pytest
          CIBW_TEST_COMMAND: "cd /d {project} && pytest tests"

      - name: Save Artefacts
        uses: actions/upload-artifact@v4
        with:
          name: wheel-windows-arm64
          path: wheelhouse/*.whl
