{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Gufo HTTP is a high-performance Python HTTP client library that handles both asynchronous and synchronous modes. It wraps famous Reqwest HTTP client, written in Rust language with PyO3 wrapper. Our task is to reach maximal performance while maintaining clean and easy-to use API.</p> <p>The getting of single URL is a simple task:</p> <pre><code>async with HttpClient() as client:\n    resp = client.get(\"https://docs.gufolabs.com/\")\n    assert resp.status == 200\n    data = resp.content\n</code></pre> <p>The <code>HttpClient</code> is highly customizable, for example, to set request headers:</p> <pre><code>async with HttpClient(headers={\"X-My-Header\": b\"test\"}) as client:\n    resp = client.get(\"https://docs.gufolabs.com/\")\n    ...\n</code></pre> <p>Gufo HTTP supports common authentication methods out-of-box:</p> <pre><code>async with HttpClient(auth=BasicAuth(\"scott\", \"tiger\")) as client:\n    resp = client.get(\"https://protected.example.com/\")\n    ...\n</code></pre> <p>The response headers processing as easy as working with dicts:</p> <pre><code>async with HttpClient(headers={\"X-My-Header\": b\"test\"}) as client:\n    resp = client.get(\"https://docs.gufolabs.com/\")\n    if resp.headers[\"Content-Type\"] == \"text/html\":\n        ...\n</code></pre>"},{"location":"#features","title":"Features","text":"<ul> <li>Clean async and blocking API.</li> <li>High performance (see Performance section for details).</li> <li>Built with security in mind.</li> <li>Customizabile redirect policy.</li> <li>TLS support.</li> <li>Basic and bearer authorization schemes.</li> <li>HTTP/HTTPS/SOCKS5 Proxy support.</li> <li>Full Python typing support.</li> <li>Editor completion.</li> <li>Built with security in mind.</li> <li>Well-tested, battle-proven code.</li> </ul>"},{"location":"#performance","title":"Performance","text":"<p>Gufo HTTP is proved to be one of the fastest Python HTTP client available in the various scenarios. For example:</p>"},{"location":"#single-http11-requests-scenario","title":"Single HTTP/1.1 requests scenario","text":"<p> Lower is better</p>"},{"location":"#100-linear-http11-requests-scenario","title":"100 Linear HTTP/1.1 requests scenario","text":"<p> Lower is better</p>"},{"location":"#100-parallel-http11-requests-scenario","title":"100 Parallel HTTP/1.1 requests scenario","text":"<p> Lower is better</p>"},{"location":"#single-https-requests-scenario","title":"Single HTTPS requests scenario","text":"<p> Lower is better</p>"},{"location":"#100-linear-https-requests-scenario","title":"100 Linear HTTPS requests scenario","text":"<p> Lower is better</p>"},{"location":"#100-parallel-https-requests-scenario","title":"100 Parallel HTTPS requests scenario","text":"<p> Lower is better</p> <p>Refer to benchmarks for details.</p>"},{"location":"#on-gufo-stack","title":"On Gufo Stack","text":"<p>This product is a part of Gufo Stack - the collaborative effort  led by Gufo Labs. Our goal is to create a robust and flexible  set of tools to create network management software and automate  routine administration tasks.</p> <p>To do this, we extract the key technologies that have proven themselves  in the NOC and bring them as separate packages. Then we work on API, performance tuning, documentation, and testing. The NOC uses the final result as the external dependencies.</p> <p>Gufo Stack makes the NOC better, and this is our primary task. But other products can benefit from Gufo Stack too. So we believe that our effort will make  the other network management products better.</p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p> <p>To see unreleased changes, please see the CHANGELOG on the main branch guide.</p>"},{"location":"CHANGELOG/#070-2025-09-18","title":"0.7.0 - 2025-09-18","text":""},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li>MacOS ARM64 binary wheels.</li> <li>Windows AMD64 binary wheels (experimental).</li> </ul>"},{"location":"CHANGELOG/#changed","title":"Changed","text":"<ul> <li>Httpd auto-detects nginx's path when passed empty <code>path</code>.</li> </ul>"},{"location":"CHANGELOG/#060-2025-09-10","title":"0.6.0 - 2025-09-10","text":""},{"location":"CHANGELOG/#added_1","title":"Added","text":"<ul> <li><code>gufo-http</code> command-line tool.</li> </ul>"},{"location":"CHANGELOG/#051-2025-09-08","title":"0.5.1 - 2025-09-08","text":""},{"location":"CHANGELOG/#security","title":"Security","text":"<ul> <li>Install security updates during devcontainer build.</li> <li>Use python:3.13-slim-trixie as base for devcontainer.</li> </ul>"},{"location":"CHANGELOG/#infrastructure","title":"Infrastructure","text":"<ul> <li>Remove <code>[bench]</code> dependencies from pyproject.toml</li> </ul>"},{"location":"CHANGELOG/#050-2025-09-07","title":"0.5.0 - 2025-09-07","text":""},{"location":"CHANGELOG/#added_2","title":"Added","text":"<ul> <li>Python 3.14 support.</li> </ul>"},{"location":"CHANGELOG/#infrastructure_1","title":"Infrastructure","text":"<ul> <li>Move dependencies to pyproject.toml</li> <li>Rust 1.89.0</li> <li>PyO3 0.26</li> <li>tokio 1.47.1</li> <li>reqwest 1.12.23</li> <li>devcontainer: Replace <code>rls</code> with <code>rust-analyzer</code>.</li> </ul>"},{"location":"CHANGELOG/#040-2025-03-17","title":"0.4.0 - 2025-03-17","text":""},{"location":"CHANGELOG/#added_3","title":"Added","text":"<ul> <li>Python 3.13 support.</li> <li>Linux ARM64 binary wheels.</li> <li>MUSL AMD64 and ARM64 wheels.</li> </ul>"},{"location":"CHANGELOG/#removed","title":"Removed","text":"<ul> <li>Python 3.8 support.</li> </ul>"},{"location":"CHANGELOG/#infrastructure_2","title":"Infrastructure","text":"<ul> <li>Rust 1.85.0.</li> <li>Rust edition 2024.</li> <li>PyO3 0.24.</li> <li>Move from <code>black</code> to <code>ruff format</code>.</li> </ul>"},{"location":"CHANGELOG/#031-2024-06-03","title":"0.3.1 - 2024-06-03","text":""},{"location":"CHANGELOG/#added_4","title":"Added","text":"<ul> <li><code>ZSTD</code> compression support.</li> </ul>"},{"location":"CHANGELOG/#fixed","title":"Fixed","text":"<ul> <li>Include rust files into sdist.</li> </ul>"},{"location":"CHANGELOG/#030-2024-03-24","title":"0.3.0 - 2024-03-24","text":""},{"location":"CHANGELOG/#added_5","title":"Added","text":"<ul> <li><code>RequestMethod</code> enum.</li> <li>Proxy support.</li> </ul>"},{"location":"CHANGELOG/#fixed_1","title":"Fixed","text":"<ul> <li>Raise <code>TimeoutError</code> on request timeout, instead of <code>RequestError</code>.</li> <li>Exception names shown without Py prefix.</li> </ul>"},{"location":"CHANGELOG/#changed_1","title":"Changed","text":"<ul> <li><code>HttpClient.request</code> accepts <code>RequestMethod</code>.</li> <li><code>HttpClient</code> accepts optional <code>proxy</code> argument.</li> <li><code>ConnectError</code> replaced with Python's builtin <code>ConnectionError</code>.</li> <li>Use Rust 1.77.0.</li> <li>Use <code>reqwest</code> 0.12.</li> </ul>"},{"location":"CHANGELOG/#020-2024-03-14","title":"0.2.0 - 2024-03-14","text":""},{"location":"CHANGELOG/#added_6","title":"Added","text":"<ul> <li><code>HttpClient.request()</code> function for both sync and async clients.</li> <li>HTTPS benchmarks.</li> <li>Httpd: <code>mode</code> configuration parameter.</li> <li>Httpd: HTTPS mode.</li> </ul>"},{"location":"CHANGELOG/#changed_2","title":"Changed","text":"<ul> <li><code>SyncRequest</code> and <code>AsyncRequest</code> are merged into unified <code>Request</code> class.</li> <li><code>Request.read()</code> meethod is replaced with <code>Request.content</code> property.</li> </ul>"},{"location":"CHANGELOG/#012-2024-03-09","title":"0.1.2 - 2024-03-09","text":""},{"location":"CHANGELOG/#added_7","title":"Added","text":"<ul> <li>Benchmark results and charts.</li> <li>Enable profile-guided optimization (PGO) during packaging stage.</li> </ul>"},{"location":"CHANGELOG/#011-2024-03-05","title":"0.1.1 - 2024-03-05","text":""},{"location":"CHANGELOG/#added_8","title":"Added","text":"<ul> <li>Benchmarks</li> </ul>"},{"location":"CHANGELOG/#changed_3","title":"Changed","text":"<ul> <li>Improved synchronous client's concurrency.</li> </ul>"},{"location":"CHANGELOG/#010-2024-03-04","title":"0.1.0 - 2024-03-04","text":""},{"location":"CHANGELOG/#added_9","title":"Added","text":"<ul> <li>Initial implementation</li> </ul>"},{"location":"LICENSE/","title":"License","text":"<p>Copyright \u00a9 2024-2025, Gufo Labs. All rights reserved.</p> <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <ol> <li>Redistributions of source code must retain the above copyright notice,    this list of conditions and the following disclaimer.</li> <li>Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the    documentation and/or other materials provided with the distribution.</li> <li>Neither the name of Gufo Labs nor the names of its contributors may be used    to endorse or promote products derived from this software without    specific prior written permission.</li> </ol> <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>"},{"location":"benchmarks/","title":"Python HTTP Clients Benchmark","text":"<p>Disclaimer</p> <p>All following information is provided only for reference. These tests are performed by Gufo Labs to estimate the performance of Gufo HTTP against major competitors, so they cannot be considered independent and unbiased.</p> <p>Note</p> <p>Although performance is an absolute requirement for Gufo Stack, other factors such as maturity, community, features, examples, and existing code base should also be considered.</p>"},{"location":"benchmarks/#abstract","title":"Abstract","text":"<p>This benchmark evaluates several Python HTTP client libraries:</p> <ul> <li>Gufo HTTP (current version)</li> <li>aiohttp (3.9.3)</li> <li>aiosonic (0.18.0)</li> <li>httpx (0.27)</li> <li>requests (2.31.0)</li> <li>niquests (3.5.2)</li> <li>PycURL (7.45.3)</li> <li>urllib from Python standard library</li> <li>urllib3 (2.2.1)</li> </ul> <p>The evaluation covers the following aspects:</p> <ul> <li>Performance in synchronous (blocking) mode, if supported.</li> <li>Performance in asynchronous (non-blocking) mode, if supported.</li> <li>Performance in plain-text (HTTP) and encrypted (HTTPS) modes.</li> <li>Ability to maintain pools of connections.</li> <li>The efficiency of the resolver.</li> <li>Ability to release GIL in multi-threaded applications.</li> </ul> <p>All benchmarks are performed against a local nginx installation using wrapper, provided by <code>gufo.http.httpd</code>.</p> <p>The benchmarking environment utilizes an AWS EC2 t2.xlarge (64-bit) instance running Debian 12.  Median values are used for benchmark ranking.</p>"},{"location":"benchmarks/#preparing","title":"Preparing","text":"<p>Start clear AWS EC2 t2.xlarge (64 bit) instance with Debian 12.</p> <p>Prepare node: <pre><code>sudo apt-get update\nsudo apt-get install --yes git python3.11-venv\npython3 -m venv bench\ncd bench\n. bin/activate\n</code></pre></p> <p>Clone repo: <pre><code>git clone https://github.com/gufolabs/gufo_http.git\ncd gufo_http\n</code></pre></p> <p>Install local nginx: <pre><code>./tools/build/setup-nginx.sh\n</code></pre></p> <p>Install test dependencies:</p> <pre><code>pip3 install -e .[test] gufo-http\n</code></pre> <p>Install third-party packages to bench:</p> <pre><code>./tools/build/setup-bench.sh\n</code></pre>"},{"location":"benchmarks/#http11-requests","title":"HTTP/1.1 Requests","text":""},{"location":"benchmarks/#single-requests","title":"Single Requests","text":"<p>Perform http requests to read 1kb text file. This test evaluates:</p> <ul> <li>The cost of client's initialization.</li> <li>The efficiency of the network code.</li> <li>The efficiency of the resolver.</li> <li>The efficiency HTTP/1.1 parser. </li> </ul> <p>Run tests: <pre><code>pytest benchmarks/test_single_x100_1k.py\n</code></pre></p> <p>Results (lower is better) <pre><code>================================================================= test session starts =================================================================\nplatform linux -- Python 3.11.2, pytest-7.4.3, pluggy-1.4.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /home/admin/bench/gufo_http\nplugins: anyio-4.3.0, benchmark-4.0.0\ncollected 11 items                                                                                                                                    \n\nbenchmarks/test_single_x100_1k.py ...........                                                                                                   [100%]\n\n\n----------------------------------------------------------------------------------------------- benchmark: 11 tests -----------------------------------------------------------------------------------------------\nName (time in us)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Min\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Max \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Mean\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 StdDev \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Median \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 IQR\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Outliers \u00a0 \u00a0 \u00a0 \u00a0 OPS\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Rounds\u00a0 Iterations\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\ntest_urllib3_sync \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 315.5930 (1.0) \u00a0 \u00a0 \u00a0 1,953.4650 (1.0) \u00a0 \u00a0 \u00a0 \u00a0 610.2618 (1.0)\u00a0 \u00a0 \u00a0 \u00a0 330.4382 (1.0) \u00a0 \u00a0 \u00a0 \u00a0 439.0200 (1.0)\u00a0 \u00a0 \u00a0 \u00a0 404.1450 (1.0) \u00a0 \u00a0 \u00a0 \u00a0 70;11\u00a0 1,638.6410 (1.0) \u00a0 \u00a0 \u00a0 \u00a0 401 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_pycurl_sync\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 352.5550 (1.12)\u00a0 \u00a0 \u00a0 2,269.8040 (1.16)\u00a0 \u00a0 \u00a0 \u00a0 806.7672 (1.32) \u00a0 \u00a0 \u00a0 420.9771 (1.27)\u00a0 \u00a0 \u00a0 \u00a0 643.1680 (1.47) \u00a0 \u00a0 \u00a0 623.1905 (1.54) \u00a0 \u00a0 \u00a0 \u00a0 20;1\u00a0 1,239.5149 (0.76) \u00a0 \u00a0 \u00a0 \u00a0 84 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_urllib_sync\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 406.5380 (1.29)\u00a0 \u00a0 \u00a0 2,557.0080 (1.31)\u00a0 \u00a0 \u00a0 \u00a0 841.9888 (1.38) \u00a0 \u00a0 \u00a0 372.7995 (1.13)\u00a0 \u00a0 \u00a0 \u00a0 764.8350 (1.74) \u00a0 \u00a0 \u00a0 507.5600 (1.26) \u00a0 \u00a0 \u00a0 174;16\u00a0 1,187.6643 (0.72)\u00a0 \u00a0 \u00a0 \u00a0 679 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_gufo_http_sync \u00a0 \u00a0 \u00a0 \u00a0 645.2300 (2.04)\u00a0 \u00a0 \u00a0 1,974.2670 (1.01)\u00a0 \u00a0 \u00a0 1,024.7860 (1.68) \u00a0 \u00a0 \u00a0 350.1131 (1.06)\u00a0 \u00a0 \u00a0 \u00a0 887.5525 (2.02) \u00a0 \u00a0 \u00a0 489.2600 (1.21) \u00a0 \u00a0 \u00a0 \u00a0 11;1\u00a0 \u00a0 975.8135 (0.60) \u00a0 \u00a0 \u00a0 \u00a0 62 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_gufo_http_async\u00a0 \u00a0 \u00a0 \u00a0 788.4390 (2.50)\u00a0 \u00a0 \u00a0 5,664.0910 (2.90)\u00a0 \u00a0 \u00a0 1,506.6534 (2.47) \u00a0 \u00a0 \u00a0 614.0673 (1.86)\u00a0 \u00a0 \u00a0 1,349.7370 (3.07) \u00a0 \u00a0 \u00a0 715.2520 (1.77)\u00a0 \u00a0 \u00a0 \u00a0 94;16\u00a0 \u00a0 663.7227 (0.41)\u00a0 \u00a0 \u00a0 \u00a0 427 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_niquests_sync\u00a0 \u00a0 \u00a0 \u00a0 1,041.0590 (3.30)\u00a0 \u00a0 \u00a0 3,306.7660 (1.69)\u00a0 \u00a0 \u00a0 1,784.9572 (2.92) \u00a0 \u00a0 \u00a0 524.2528 (1.59)\u00a0 \u00a0 \u00a0 1,757.2750 (4.00) \u00a0 \u00a0 \u00a0 792.8572 (1.96)\u00a0 \u00a0 \u00a0 \u00a0 105;0\u00a0 \u00a0 560.2375 (0.34)\u00a0 \u00a0 \u00a0 \u00a0 295 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_requests_sync\u00a0 \u00a0 \u00a0 \u00a0 1,142.8490 (3.62)\u00a0 \u00a0 \u00a0 4,356.9150 (2.23)\u00a0 \u00a0 \u00a0 1,980.0989 (3.24) \u00a0 \u00a0 \u00a0 540.1271 (1.63)\u00a0 \u00a0 \u00a0 1,878.3090 (4.28) \u00a0 \u00a0 \u00a0 688.4175 (1.70) \u00a0 \u00a0 \u00a0 \u00a0 38;2\u00a0 \u00a0 505.0253 (0.31)\u00a0 \u00a0 \u00a0 \u00a0 128 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_aiosonic_async \u00a0 \u00a0 \u00a0 1,314.5540 (4.17) \u00a0 \u00a0 26,605.4950 (13.62) \u00a0 \u00a0 2,439.8901 (4.00) \u00a0 \u00a0 1,353.5612 (4.10)\u00a0 \u00a0 \u00a0 2,288.9965 (5.21) \u00a0 \u00a0 \u00a0 870.0770 (2.15) \u00a0 \u00a0 \u00a0 \u00a0 15;8\u00a0 \u00a0 409.8545 (0.25)\u00a0 \u00a0 \u00a0 \u00a0 414 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_aiohttp_async\u00a0 \u00a0 \u00a0 \u00a0 1,522.4400 (4.82)\u00a0 \u00a0 \u00a0 4,332.3290 (2.22)\u00a0 \u00a0 \u00a0 2,410.5835 (3.95) \u00a0 \u00a0 \u00a0 546.5448 (1.65)\u00a0 \u00a0 \u00a0 2,362.1815 (5.38) \u00a0 \u00a0 \u00a0 644.2570 (1.59)\u00a0 \u00a0 \u00a0 \u00a0 64;11\u00a0 \u00a0 414.8373 (0.25)\u00a0 \u00a0 \u00a0 \u00a0 226 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_httpx_sync\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 29,020.7400 (91.96)\u00a0 \u00a0 44,995.3310 (23.03)\u00a0 \u00a0 31,439.1071 (51.52)\u00a0 \u00a0 3,381.3880 (10.23)\u00a0 \u00a0 30,473.2290 (69.41)\u00a0 \u00a0 1,448.3905 (3.58)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 2;2 \u00a0 \u00a0 31.8075 (0.02) \u00a0 \u00a0 \u00a0 \u00a0 28 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_httpx_async \u00a0 \u00a0 \u00a0 \u00a0 31,839.8170 (100.89) \u00a0 40,042.2010 (20.50)\u00a0 \u00a0 34,166.0839 (55.99)\u00a0 \u00a0 2,136.0948 (6.46) \u00a0 \u00a0 33,778.5725 (76.94)\u00a0 \u00a0 2,489.8810 (6.16)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 4;1 \u00a0 \u00a0 29.2688 (0.02) \u00a0 \u00a0 \u00a0 \u00a0 18 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nLegend:\n  Outliers: 1 Standard Deviation from Mean; 1.5 IQR (InterQuartile Range) from 1st Quartile and 3rd Quartile.\n  OPS: Operations Per Second, computed as 1 / Mean\n================================================================= 11 passed in 9.41s ==================================================================\n</code></pre></p> <p> Lower is better</p>"},{"location":"benchmarks/#100-linear-requests","title":"100 Linear Requests","text":"<p>Perform set of 100 linear http requests to read 1kb text file using single client session whenever possible. This test evaluates:</p> <ul> <li>The efficiency of the network code.</li> <li>The efficency of the HTTP/1.1 parser.</li> <li>An ability to maintain connection pools.</li> </ul> <p>Run tests: <pre><code>pytest benchmarks/test_linear_x100_1k.py\n</code></pre></p> <p>Results (lower is better) <pre><code>================================================================= test session starts =================================================================\nplatform linux -- Python 3.11.2, pytest-7.4.3, pluggy-1.4.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /home/admin/bench/gufo_http\nplugins: anyio-4.3.0, benchmark-4.0.0\ncollected 11 items                                                                                                                                    \n\nbenchmarks/test_linear_x100_1k.py ...........                                                                                                   [100%]\n\n\n----------------------------------------------------------------------------------- benchmark: 11 tests ------------------------------------------------------------------------------------\nName (time in ms) \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Min \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Max\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Mean\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 StdDev\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Median \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 IQR\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Outliers\u00a0 \u00a0 \u00a0 OPS\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Rounds\u00a0 Iterations\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\ntest_pycurl_sync\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 12.2676 (1.0) \u00a0 \u00a0 \u00a0 25.4155 (1.0) \u00a0 \u00a0 \u00a0 17.3400 (1.0)\u00a0 \u00a0 \u00a0 2.9618 (1.18)\u00a0 \u00a0 \u00a0 16.7385 (1.0)\u00a0 \u00a0 \u00a0 3.9695 (1.07) \u00a0 \u00a0 \u00a0 \u00a0 16;1\u00a0 57.6702 (1.0)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 57 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_gufo_http_sync \u00a0 \u00a0 \u00a0 16.3684 (1.33)\u00a0 \u00a0 \u00a0 37.9210 (1.49)\u00a0 \u00a0 \u00a0 20.7391 (1.20) \u00a0 \u00a0 3.4916 (1.39)\u00a0 \u00a0 \u00a0 20.3685 (1.22) \u00a0 \u00a0 4.2991 (1.16) \u00a0 \u00a0 \u00a0 \u00a0 12;1\u00a0 48.2180 (0.84) \u00a0 \u00a0 \u00a0 \u00a0 58 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_aiohttp_async\u00a0 \u00a0 \u00a0 \u00a0 33.9824 (2.77)\u00a0 \u00a0 \u00a0 48.9004 (1.92)\u00a0 \u00a0 \u00a0 40.0792 (2.31) \u00a0 \u00a0 3.5440 (1.41)\u00a0 \u00a0 \u00a0 40.1342 (2.40) \u00a0 \u00a0 4.7475 (1.28) \u00a0 \u00a0 \u00a0 \u00a0 10;0\u00a0 24.9506 (0.43) \u00a0 \u00a0 \u00a0 \u00a0 27 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_gufo_http_async\u00a0 \u00a0 \u00a0 34.3208 (2.80)\u00a0 \u00a0 \u00a0 55.8114 (2.20)\u00a0 \u00a0 \u00a0 39.9312 (2.30) \u00a0 \u00a0 5.4085 (2.16)\u00a0 \u00a0 \u00a0 38.5485 (2.30) \u00a0 \u00a0 6.2433 (1.69)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 3;2\u00a0 25.0431 (0.43) \u00a0 \u00a0 \u00a0 \u00a0 25 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_aiosonic_async \u00a0 \u00a0 \u00a0 37.0986 (3.02)\u00a0 \u00a0 \u00a0 50.8252 (2.00)\u00a0 \u00a0 \u00a0 42.6358 (2.46) \u00a0 \u00a0 3.8782 (1.55)\u00a0 \u00a0 \u00a0 42.0837 (2.51) \u00a0 \u00a0 6.5579 (1.77)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 7;0\u00a0 23.4545 (0.41) \u00a0 \u00a0 \u00a0 \u00a0 24 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_urllib3_sync \u00a0 \u00a0 \u00a0 \u00a0 46.4213 (3.78)\u00a0 \u00a0 \u00a0 63.7727 (2.51)\u00a0 \u00a0 \u00a0 53.7701 (3.10) \u00a0 \u00a0 4.4014 (1.75)\u00a0 \u00a0 \u00a0 53.1810 (3.18) \u00a0 \u00a0 4.7094 (1.27)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 6;1\u00a0 18.5977 (0.32) \u00a0 \u00a0 \u00a0 \u00a0 18 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_urllib_sync\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 76.5546 (6.24)\u00a0 \u00a0 \u00a0 88.3289 (3.48)\u00a0 \u00a0 \u00a0 82.3095 (4.75) \u00a0 \u00a0 3.0507 (1.22)\u00a0 \u00a0 \u00a0 82.4179 (4.92) \u00a0 \u00a0 4.1461 (1.12)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 3;0\u00a0 12.1493 (0.21) \u00a0 \u00a0 \u00a0 \u00a0 13 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_niquests_sync\u00a0 \u00a0 \u00a0 \u00a0 83.6885 (6.82) \u00a0 \u00a0 118.0402 (4.64)\u00a0 \u00a0 \u00a0 93.3783 (5.39) \u00a0 \u00a0 9.3339 (3.72)\u00a0 \u00a0 \u00a0 91.6432 (5.47) \u00a0 \u00a0 6.9887 (1.89)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 2;1\u00a0 10.7091 (0.19) \u00a0 \u00a0 \u00a0 \u00a0 11 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_httpx_sync \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 91.5660 (7.46) \u00a0 \u00a0 103.7892 (4.08)\u00a0 \u00a0 \u00a0 99.5922 (5.74) \u00a0 \u00a0 3.6278 (1.45)\u00a0 \u00a0 \u00a0 99.7707 (5.96) \u00a0 \u00a0 4.5265 (1.22)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 2;1\u00a0 10.0409 (0.17) \u00a0 \u00a0 \u00a0 \u00a0 10 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_httpx_async \u00a0 \u00a0 \u00a0 \u00a0 135.8147 (11.07)\u00a0 \u00a0 142.9130 (5.62) \u00a0 \u00a0 139.1866 (8.03) \u00a0 \u00a0 2.5082 (1.0)\u00a0 \u00a0 \u00a0 138.5708 (8.28) \u00a0 \u00a0 3.7021 (1.0) \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 2;0 \u00a0 7.1846 (0.12)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 7 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_requests_sync \u00a0 \u00a0 \u00a0 180.6693 (14.73)\u00a0 \u00a0 193.1162 (7.60) \u00a0 \u00a0 188.7409 (10.88)\u00a0 \u00a0 4.9108 (1.96) \u00a0 \u00a0 190.3143 (11.37)\u00a0 \u00a0 7.2885 (1.97)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1;0 \u00a0 5.2983 (0.09)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 6 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nLegend:\n  Outliers: 1 Standard Deviation from Mean; 1.5 IQR (InterQuartile Range) from 1st Quartile and 3rd Quartile.\n  OPS: Operations Per Second, computed as 1 / Mean\n================================================================= 11 passed in 15.62s =================================================================\n</code></pre></p> <p> Lower is better</p>"},{"location":"benchmarks/#100-parallel-requests","title":"100 Parallel Requests","text":"<p>Perform 100 HTTP/1.1 requests to read 1kb text file with concurrency of 4 maintaininng single client session per thread/coroutine.</p> <ul> <li>The efficiency of the network code.</li> <li>The efficency of the HTTP/1.1 parser.</li> <li>An ability to maintain connection pools.</li> <li>Granularity of the internal locks.</li> <li>Ability to release GIL when runnning native code.</li> </ul> <p>Run tests: <pre><code>pytest benchmarks/test_p4_x100_1k.py\n</code></pre></p> <p>Results (lower is better) <pre><code>================================================================= test session starts =================================================================\nplatform linux -- Python 3.11.2, pytest-7.4.3, pluggy-1.4.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /home/admin/bench/gufo_http\nplugins: anyio-4.3.0, benchmark-4.0.0\ncollected 11 items                                                                                                                                    \n\nbenchmarks/test_p4_x100_1k.py ...........                                                                                                       [100%]\n\n\n------------------------------------------------------------------------------------- benchmark: 11 tests -------------------------------------------------------------------------------------\nName (time in ms) \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Min \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Max\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Mean \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 StdDev\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Median\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 IQR\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Outliers \u00a0 \u00a0 \u00a0 OPS\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Rounds\u00a0 Iterations\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\ntest_gufo_http_sync\u00a0 \u00a0 \u00a0 \u00a0 7.0383 (1.0) \u00a0 \u00a0 \u00a0 13.9629 (1.0)\u00a0 \u00a0 \u00a0 \u00a0 9.4300 (1.0) \u00a0 \u00a0 \u00a0 1.4689 (1.08) \u00a0 \u00a0 \u00a0 9.1168 (1.0) \u00a0 \u00a0 \u00a0 1.6141 (1.0)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 24;5\u00a0 106.0445 (1.0)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 95 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_pycurl_sync \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 7.4035 (1.05)\u00a0 \u00a0 \u00a0 14.6372 (1.05)\u00a0 \u00a0 \u00a0 10.9820 (1.16)\u00a0 \u00a0 \u00a0 1.3631 (1.0) \u00a0 \u00a0 \u00a0 10.8603 (1.19)\u00a0 \u00a0 \u00a0 1.7449 (1.08) \u00a0 \u00a0 \u00a0 \u00a0 24;2 \u00a0 91.0579 (0.86) \u00a0 \u00a0 \u00a0 \u00a0 97 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_gufo_http_async\u00a0 \u00a0 \u00a0 21.8823 (3.11)\u00a0 \u00a0 \u00a0 42.1156 (3.02)\u00a0 \u00a0 \u00a0 28.1519 (2.99)\u00a0 \u00a0 \u00a0 4.4911 (3.29)\u00a0 \u00a0 \u00a0 27.5413 (3.02)\u00a0 \u00a0 \u00a0 3.2355 (2.00)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 8;4 \u00a0 35.5216 (0.33) \u00a0 \u00a0 \u00a0 \u00a0 37 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_aiosonic_async \u00a0 \u00a0 \u00a0 25.7488 (3.66)\u00a0 \u00a0 \u00a0 32.4308 (2.32)\u00a0 \u00a0 \u00a0 28.4868 (3.02)\u00a0 \u00a0 \u00a0 1.5410 (1.13)\u00a0 \u00a0 \u00a0 28.2754 (3.10)\u00a0 \u00a0 \u00a0 2.2880 (1.42)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 8;0 \u00a0 35.1039 (0.33) \u00a0 \u00a0 \u00a0 \u00a0 34 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_aiohttp_async\u00a0 \u00a0 \u00a0 \u00a0 27.2243 (3.87)\u00a0 \u00a0 \u00a0 34.4230 (2.47)\u00a0 \u00a0 \u00a0 30.4883 (3.23)\u00a0 \u00a0 \u00a0 1.5876 (1.16)\u00a0 \u00a0 \u00a0 30.3699 (3.33)\u00a0 \u00a0 \u00a0 2.1031 (1.30) \u00a0 \u00a0 \u00a0 \u00a0 10;0 \u00a0 32.7995 (0.31) \u00a0 \u00a0 \u00a0 \u00a0 32 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_urllib_sync\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 44.1667 (6.28)\u00a0 \u00a0 \u00a0 57.7049 (4.13)\u00a0 \u00a0 \u00a0 49.5278 (5.25)\u00a0 \u00a0 \u00a0 3.9345 (2.89)\u00a0 \u00a0 \u00a0 48.6588 (5.34)\u00a0 \u00a0 \u00a0 6.7631 (4.19)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 6;0 \u00a0 20.1907 (0.19) \u00a0 \u00a0 \u00a0 \u00a0 19 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_urllib3_sync \u00a0 \u00a0 \u00a0 \u00a0 59.2323 (8.42)\u00a0 \u00a0 \u00a0 72.4158 (5.19)\u00a0 \u00a0 \u00a0 64.3498 (6.82)\u00a0 \u00a0 \u00a0 3.8982 (2.86)\u00a0 \u00a0 \u00a0 63.7425 (6.99)\u00a0 \u00a0 \u00a0 4.1363 (2.56)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 5;2 \u00a0 15.5401 (0.15) \u00a0 \u00a0 \u00a0 \u00a0 16 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_niquests_sync \u00a0 \u00a0 \u00a0 100.4601 (14.27)\u00a0 \u00a0 139.2160 (9.97) \u00a0 \u00a0 110.5149 (11.72)\u00a0 \u00a0 10.8800 (7.98) \u00a0 \u00a0 106.8657 (11.72) \u00a0 \u00a0 5.8011 (3.59)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1;1\u00a0 \u00a0 9.0486 (0.09) \u00a0 \u00a0 \u00a0 \u00a0 10 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_requests_sync \u00a0 \u00a0 \u00a0 161.4683 (22.94)\u00a0 \u00a0 174.5389 (12.50)\u00a0 \u00a0 169.3991 (17.96) \u00a0 \u00a0 4.6770 (3.43) \u00a0 \u00a0 170.5587 (18.71) \u00a0 \u00a0 5.6301 (3.49)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 2;0\u00a0 \u00a0 5.9032 (0.06)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 6 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_httpx_sync\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 161.8872 (23.00)\u00a0 \u00a0 192.4557 (13.78)\u00a0 \u00a0 175.4736 (18.61)\u00a0 \u00a0 11.1773 (8.20) \u00a0 \u00a0 172.9252 (18.97)\u00a0 \u00a0 16.5080 (10.23) \u00a0 \u00a0 \u00a0 \u00a0 2;0\u00a0 \u00a0 5.6989 (0.05)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 6 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_httpx_async \u00a0 \u00a0 \u00a0 \u00a0 211.6434 (30.07)\u00a0 \u00a0 226.0049 (16.19)\u00a0 \u00a0 217.8645 (23.10) \u00a0 \u00a0 6.5345 (4.79) \u00a0 \u00a0 216.3168 (23.73)\u00a0 \u00a0 12.0336 (7.46)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1;0\u00a0 \u00a0 4.5900 (0.04)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 5 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nLegend:\n  Outliers: 1 Standard Deviation from Mean; 1.5 IQR (InterQuartile Range) from 1st Quartile and 3rd Quartile.\n  OPS: Operations Per Second, computed as 1 / Mean\n================================================================= 11 passed in 15.82s =================================================================\n</code></pre></p> <p> Lower is better</p>"},{"location":"benchmarks/#https-requests","title":"HTTPS Requests","text":""},{"location":"benchmarks/#single-requests_1","title":"Single Requests","text":"<p>Perform HTTP/2 requests to read 1kb text file. This test evaluates:</p> <ul> <li>The cost of client's initialization.</li> <li>The efficiency of the network code.</li> <li>The efficiency HTTP/1.1 or HTTP/2 parser. </li> <li>The efficency of the crypto.</li> <li>The efficiency of the resolver.</li> </ul> <p>Run tests: <pre><code>pytest benchmarks/test_https_single_x100_1k.py\n</code></pre></p> <p>Results (lower is better) <pre><code>================================================================= test session starts =================================================================\nplatform linux -- Python 3.11.2, pytest-7.4.3, pluggy-1.4.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /home/admin/bench/gufo_http\nplugins: anyio-4.3.0, benchmark-4.0.0\ncollected 11 items                                                                                                                                    \n\nbenchmarks/test_https_single_x100_1k.py ...........                                                                                             [100%]\n\n\n--------------------------------------------------------------------------------- benchmark: 11 tests ----------------------------------------------------------------------------------\nName (time in ms)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Min\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Max \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Mean\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 StdDev \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Median \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 IQR\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Outliers\u00a0 \u00a0 \u00a0 OPS\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Rounds\u00a0 Iterations\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\ntest_gufo_http_async\u00a0 \u00a0 \u00a0 8.7915 (1.0)\u00a0 \u00a0 \u00a0 12.2763 (1.0)\u00a0 \u00a0 \u00a0 10.6205 (1.01) \u00a0 \u00a0 0.7521 (1.17) \u00a0 \u00a0 10.4619 (1.00) \u00a0 \u00a0 1.0622 (1.30) \u00a0 \u00a0 \u00a0 \u00a0 26;0\u00a0 94.1573 (0.99) \u00a0 \u00a0 \u00a0 \u00a0 87 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_gufo_http_sync \u00a0 \u00a0 \u00a0 8.8296 (1.00) \u00a0 \u00a0 15.8669 (1.29) \u00a0 \u00a0 10.6821 (1.02) \u00a0 \u00a0 1.2183 (1.89) \u00a0 \u00a0 10.4338 (1.0)\u00a0 \u00a0 \u00a0 1.1554 (1.41) \u00a0 \u00a0 \u00a0 \u00a0 13;3\u00a0 93.6144 (0.98) \u00a0 \u00a0 \u00a0 \u00a0 71 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_pycurl_sync\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 9.2207 (1.05) \u00a0 \u00a0 12.4415 (1.01) \u00a0 \u00a0 10.4905 (1.0)\u00a0 \u00a0 \u00a0 0.6444 (1.0)\u00a0 \u00a0 \u00a0 10.4416 (1.00) \u00a0 \u00a0 0.8200 (1.0)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 16;2\u00a0 95.3244 (1.0)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 62 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_urllib_sync\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 9.6548 (1.10) \u00a0 \u00a0 20.3480 (1.66) \u00a0 \u00a0 11.7571 (1.12) \u00a0 \u00a0 1.2565 (1.95) \u00a0 \u00a0 11.4713 (1.10) \u00a0 \u00a0 0.8705 (1.06)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 5;4\u00a0 85.0547 (0.89) \u00a0 \u00a0 \u00a0 \u00a0 86 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_httpx_sync\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 10.5788 (1.20) \u00a0 \u00a0 14.6097 (1.19) \u00a0 \u00a0 12.2516 (1.17) \u00a0 \u00a0 0.8117 (1.26) \u00a0 \u00a0 12.2890 (1.18) \u00a0 \u00a0 0.9669 (1.18) \u00a0 \u00a0 \u00a0 \u00a0 25;1\u00a0 81.6223 (0.86) \u00a0 \u00a0 \u00a0 \u00a0 71 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_aiohttp_async \u00a0 \u00a0 \u00a0 12.3006 (1.40) \u00a0 \u00a0 17.2634 (1.41) \u00a0 \u00a0 13.5143 (1.29) \u00a0 \u00a0 1.0618 (1.65) \u00a0 \u00a0 13.4668 (1.29) \u00a0 \u00a0 0.8817 (1.08)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 2;1\u00a0 73.9956 (0.78) \u00a0 \u00a0 \u00a0 \u00a0 18 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_httpx_async \u00a0 \u00a0 \u00a0 \u00a0 13.1090 (1.49) \u00a0 \u00a0 16.3325 (1.33) \u00a0 \u00a0 14.7676 (1.41) \u00a0 \u00a0 0.7922 (1.23) \u00a0 \u00a0 14.7109 (1.41) \u00a0 \u00a0 1.1775 (1.44) \u00a0 \u00a0 \u00a0 \u00a0 16;0\u00a0 67.7158 (0.71) \u00a0 \u00a0 \u00a0 \u00a0 43 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_requests_sync \u00a0 \u00a0 \u00a0 38.4122 (4.37) \u00a0 \u00a0 44.0851 (3.59) \u00a0 \u00a0 41.0690 (3.91) \u00a0 \u00a0 1.0758 (1.67) \u00a0 \u00a0 40.9266 (3.92) \u00a0 \u00a0 0.9473 (1.16)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 3;2\u00a0 24.3493 (0.26) \u00a0 \u00a0 \u00a0 \u00a0 20 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_niquests_sync \u00a0 \u00a0 \u00a0 38.5521 (4.39) \u00a0 \u00a0 42.7355 (3.48) \u00a0 \u00a0 40.8687 (3.90) \u00a0 \u00a0 1.0084 (1.56) \u00a0 \u00a0 40.7714 (3.91) \u00a0 \u00a0 1.1362 (1.39)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 9;1\u00a0 24.4686 (0.26) \u00a0 \u00a0 \u00a0 \u00a0 25 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_urllib3_sync\u00a0 \u00a0 \u00a0 \u00a0 38.7738 (4.41) \u00a0 \u00a0 44.2748 (3.61) \u00a0 \u00a0 40.9581 (3.90) \u00a0 \u00a0 1.4479 (2.25) \u00a0 \u00a0 40.8991 (3.92) \u00a0 \u00a0 2.1439 (2.61)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 8;0\u00a0 24.4152 (0.26) \u00a0 \u00a0 \u00a0 \u00a0 26 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_aiosonic_async\u00a0 \u00a0 \u00a0 38.9962 (4.44) \u00a0 \u00a0 45.1008 (3.67) \u00a0 \u00a0 41.0321 (3.91) \u00a0 \u00a0 1.5977 (2.48) \u00a0 \u00a0 40.8883 (3.92) \u00a0 \u00a0 1.9366 (2.36)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 9;1\u00a0 24.3712 (0.26) \u00a0 \u00a0 \u00a0 \u00a0 24 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nLegend:\n  Outliers: 1 Standard Deviation from Mean; 1.5 IQR (InterQuartile Range) from 1st Quartile and 3rd Quartile.\n  OPS: Operations Per Second, computed as 1 / Mean\n========================================================== 11 passed, 45 warnings in 15.69s ===========================================================\n</code></pre></p> <p> Lower is better</p>"},{"location":"benchmarks/#100-linear-requests_1","title":"100 Linear Requests","text":"<p>Perform set of 100 linear HTTPS requests to read 1kb text file using single client session whenever possible. This test evaluates:</p> <ul> <li>The efficiency of the network code.</li> <li>The efficency of the HTTP/1.1 parser.</li> <li>An ability to maintain connection pools.</li> <li>The efficency of the crypto.</li> </ul> <p>Run tests: <pre><code>pytest benchmarks/test_https_linear_x100_1k.py\n</code></pre></p> <p>Results (lower is better)</p> <pre><code>================================================================= test session starts =================================================================\nplatform linux -- Python 3.11.2, pytest-7.4.3, pluggy-1.4.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /home/admin/bench/gufo_http\nplugins: anyio-4.3.0, benchmark-4.0.0\ncollected 11 items                                                                                                                                    \n\nbenchmarks/test_https_linear_x100_1k.py ...........                                                                                             [100%]\n\n\n---------------------------------------------------------------------------------------- benchmark: 11 tests -----------------------------------------------------------------------------------------\nName (time in ms) \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Min \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Max\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Mean \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 StdDev\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Median\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 IQR\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Outliers\u00a0 \u00a0 \u00a0 OPS\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Rounds\u00a0 Iterations\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\ntest_pycurl_sync\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 23.7046 (1.0) \u00a0 \u00a0 \u00a0 \u00a0 34.5084 (1.0) \u00a0 \u00a0 \u00a0 \u00a0 28.0373 (1.0) \u00a0 \u00a0 \u00a0 2.7286 (1.05)\u00a0 \u00a0 \u00a0 \u00a0 27.5175 (1.0) \u00a0 \u00a0 \u00a0 3.1725 (1.51) \u00a0 \u00a0 \u00a0 \u00a0 13;1\u00a0 35.6668 (1.0)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 36 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_gufo_http_sync \u00a0 \u00a0 \u00a0 \u00a0 29.9783 (1.26)\u00a0 \u00a0 \u00a0 \u00a0 43.9089 (1.27)\u00a0 \u00a0 \u00a0 \u00a0 34.6652 (1.24)\u00a0 \u00a0 \u00a0 3.4124 (1.31)\u00a0 \u00a0 \u00a0 \u00a0 34.1431 (1.24)\u00a0 \u00a0 \u00a0 3.3721 (1.60)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 6;2\u00a0 28.8473 (0.81) \u00a0 \u00a0 \u00a0 \u00a0 27 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_gufo_http_async\u00a0 \u00a0 \u00a0 \u00a0 46.8830 (1.98)\u00a0 \u00a0 \u00a0 \u00a0 60.8049 (1.76)\u00a0 \u00a0 \u00a0 \u00a0 52.9559 (1.89)\u00a0 \u00a0 \u00a0 3.4813 (1.34)\u00a0 \u00a0 \u00a0 \u00a0 53.4698 (1.94)\u00a0 \u00a0 \u00a0 3.3365 (1.59)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 6;1\u00a0 18.8836 (0.53) \u00a0 \u00a0 \u00a0 \u00a0 20 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_aiohttp_async\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 54.6583 (2.31)\u00a0 \u00a0 \u00a0 \u00a0 67.3119 (1.95)\u00a0 \u00a0 \u00a0 \u00a0 59.1695 (2.11)\u00a0 \u00a0 \u00a0 3.4653 (1.33)\u00a0 \u00a0 \u00a0 \u00a0 58.1128 (2.11)\u00a0 \u00a0 \u00a0 3.0986 (1.47)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 3;1\u00a0 16.9006 (0.47) \u00a0 \u00a0 \u00a0 \u00a0 12 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_httpx_sync \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 81.5782 (3.44)\u00a0 \u00a0 \u00a0 \u00a0 92.6393 (2.68)\u00a0 \u00a0 \u00a0 \u00a0 86.0377 (3.07)\u00a0 \u00a0 \u00a0 2.6015 (1.0) \u00a0 \u00a0 \u00a0 \u00a0 85.8659 (3.12)\u00a0 \u00a0 \u00a0 2.1049 (1.0) \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 2;2\u00a0 11.6228 (0.33) \u00a0 \u00a0 \u00a0 \u00a0 12 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_aiosonic_async \u00a0 \u00a0 \u00a0 \u00a0 83.6425 (3.53)\u00a0 \u00a0 \u00a0 \u00a0 92.7221 (2.69)\u00a0 \u00a0 \u00a0 \u00a0 88.8669 (3.17)\u00a0 \u00a0 \u00a0 3.0862 (1.19)\u00a0 \u00a0 \u00a0 \u00a0 88.5831 (3.22)\u00a0 \u00a0 \u00a0 4.7266 (2.25)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 4;0\u00a0 11.2528 (0.32) \u00a0 \u00a0 \u00a0 \u00a0 11 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_urllib3_sync \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 93.8056 (3.96) \u00a0 \u00a0 \u00a0 108.2151 (3.14) \u00a0 \u00a0 \u00a0 103.6100 (3.70)\u00a0 \u00a0 \u00a0 4.4636 (1.72) \u00a0 \u00a0 \u00a0 104.2995 (3.79)\u00a0 \u00a0 \u00a0 5.2626 (2.50)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 3;1 \u00a0 9.6516 (0.27) \u00a0 \u00a0 \u00a0 \u00a0 10 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_httpx_async \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 121.2678 (5.12) \u00a0 \u00a0 \u00a0 129.0288 (3.74) \u00a0 \u00a0 \u00a0 125.5163 (4.48)\u00a0 \u00a0 \u00a0 2.7471 (1.06) \u00a0 \u00a0 \u00a0 125.2434 (4.55)\u00a0 \u00a0 \u00a0 4.4465 (2.11)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 3;0 \u00a0 7.9671 (0.22)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 8 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_niquests_sync \u00a0 \u00a0 \u00a0 \u00a0 139.6578 (5.89) \u00a0 \u00a0 \u00a0 149.3103 (4.33) \u00a0 \u00a0 \u00a0 145.1738 (5.18)\u00a0 \u00a0 \u00a0 3.3405 (1.28) \u00a0 \u00a0 \u00a0 145.8421 (5.30)\u00a0 \u00a0 \u00a0 3.7032 (1.76)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 2;0 \u00a0 6.8883 (0.19)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 6 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_urllib_sync \u00a0 \u00a0 \u00a0 \u00a0 1,128.9319 (47.63)\u00a0 \u00a0 1,143.7361 (33.14)\u00a0 \u00a0 1,138.7279 (40.61) \u00a0 \u00a0 5.9014 (2.27) \u00a0 \u00a0 1,140.5120 (41.45) \u00a0 \u00a0 7.1488 (3.40)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1;0 \u00a0 0.8782 (0.02)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 5 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_requests_sync \u00a0 \u00a0 \u00a0 4,121.8836 (173.89) \u00a0 4,151.7480 (120.31) \u00a0 4,131.9819 (147.37) \u00a0 11.9202 (4.58) \u00a0 \u00a0 4,129.1534 (150.06) \u00a0 14.5257 (6.90)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1;0 \u00a0 0.2420 (0.01)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 5 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nLegend:\n  Outliers: 1 Standard Deviation from Mean; 1.5 IQR (InterQuartile Range) from 1st Quartile and 3rd Quartile.\n  OPS: Operations Per Second, computed as 1 / Mean\n==================================================== 11 passed, 1215 warnings in 62.84s (0:01:02) =====================================================\n</code></pre> <p> Lower is better</p>"},{"location":"benchmarks/#100-parallel-requests_1","title":"100 Parallel Requests","text":"<p>Perform 100 HTTPS requests to read 1kb text file with concurrency of 4 maintaininng single client session per thread/coroutine.</p> <ul> <li>The efficiency of the network code.</li> <li>The efficency of the HTTP/1.1 parser.</li> <li>An ability to maintain connection pools.</li> <li>Granularity of the internal locks.</li> <li>Ability to release GIL when runnning native code.</li> </ul> <p>Run tests: <pre><code>pytest benchmarks/test_https_p4_x100_1k.py\n</code></pre></p> <p>Results (lower is better) <pre><code>================================================================= test session starts =================================================================\nplatform linux -- Python 3.11.2, pytest-7.4.3, pluggy-1.4.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /home/admin/bench/gufo_http\nplugins: anyio-4.3.0, benchmark-4.0.0\ncollected 11 items                                                                                                                                    \n\nbenchmarks/test_https_p4_x100_1k.py ...........                                                                                                 [100%]\n\n\n----------------------------------------------------------------------------------------- benchmark: 11 tests ------------------------------------------------------------------------------------------\nName (time in ms) \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Min \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Max\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Mean\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 StdDev\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Median \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 IQR\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Outliers\u00a0 \u00a0 \u00a0 OPS\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Rounds\u00a0 Iterations\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\ntest_gufo_http_sync \u00a0 \u00a0 \u00a0 \u00a0 18.8254 (1.0) \u00a0 \u00a0 \u00a0 \u00a0 30.3264 (1.0) \u00a0 \u00a0 \u00a0 \u00a0 25.7748 (1.0)\u00a0 \u00a0 \u00a0 \u00a0 3.1315 (1.20)\u00a0 \u00a0 \u00a0 \u00a0 26.6940 (1.0)\u00a0 \u00a0 \u00a0 \u00a0 2.8348 (1.0)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 10;4\u00a0 38.7975 (1.0)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 34 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_pycurl_sync\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 21.6306 (1.15)\u00a0 \u00a0 \u00a0 \u00a0 32.7644 (1.08)\u00a0 \u00a0 \u00a0 \u00a0 27.3538 (1.06) \u00a0 \u00a0 \u00a0 2.6036 (1.0) \u00a0 \u00a0 \u00a0 \u00a0 27.3959 (1.03) \u00a0 \u00a0 \u00a0 3.4922 (1.23) \u00a0 \u00a0 \u00a0 \u00a0 13;0\u00a0 36.5580 (0.94) \u00a0 \u00a0 \u00a0 \u00a0 37 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_gufo_http_async\u00a0 \u00a0 \u00a0 \u00a0 37.4205 (1.99)\u00a0 \u00a0 \u00a0 \u00a0 65.0476 (2.14)\u00a0 \u00a0 \u00a0 \u00a0 49.4927 (1.92) \u00a0 \u00a0 \u00a0 7.8136 (3.00)\u00a0 \u00a0 \u00a0 \u00a0 47.2254 (1.77) \u00a0 \u00a0 \u00a0 7.0210 (2.48)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 8;2\u00a0 20.2050 (0.52) \u00a0 \u00a0 \u00a0 \u00a0 21 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_aiohttp_async\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 52.3300 (2.78)\u00a0 \u00a0 \u00a0 \u00a0 69.1030 (2.28)\u00a0 \u00a0 \u00a0 \u00a0 58.7268 (2.28) \u00a0 \u00a0 \u00a0 5.1573 (1.98)\u00a0 \u00a0 \u00a0 \u00a0 56.9829 (2.13) \u00a0 \u00a0 \u00a0 5.0403 (1.78)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 3;2\u00a0 17.0280 (0.44) \u00a0 \u00a0 \u00a0 \u00a0 13 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_httpx_sync \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 98.6042 (5.24) \u00a0 \u00a0 \u00a0 117.8161 (3.88) \u00a0 \u00a0 \u00a0 105.8565 (4.11) \u00a0 \u00a0 \u00a0 6.3216 (2.43) \u00a0 \u00a0 \u00a0 104.5910 (3.92) \u00a0 \u00a0 \u00a0 8.9421 (3.15)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 3;0 \u00a0 9.4468 (0.24)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 9 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_httpx_async \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 122.4068 (6.50) \u00a0 \u00a0 \u00a0 140.9107 (4.65) \u00a0 \u00a0 \u00a0 132.2846 (5.13) \u00a0 \u00a0 \u00a0 8.4108 (3.23) \u00a0 \u00a0 \u00a0 133.1786 (4.99)\u00a0 \u00a0 \u00a0 15.8468 (5.59)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 3;0 \u00a0 7.5595 (0.19)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 8 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_aiosonic_async\u00a0 \u00a0 \u00a0 \u00a0 162.1061 (8.61) \u00a0 \u00a0 \u00a0 213.1706 (7.03) \u00a0 \u00a0 \u00a0 178.6271 (6.93)\u00a0 \u00a0 \u00a0 16.3708 (6.29) \u00a0 \u00a0 \u00a0 174.2818 (6.53) \u00a0 \u00a0 \u00a0 9.2994 (3.28)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 2;1 \u00a0 5.5983 (0.14)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 7 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_urllib3_sync\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 171.9625 (9.13) \u00a0 \u00a0 \u00a0 195.0597 (6.43) \u00a0 \u00a0 \u00a0 184.1284 (7.14) \u00a0 \u00a0 \u00a0 8.2140 (3.15) \u00a0 \u00a0 \u00a0 184.4066 (6.91)\u00a0 \u00a0 \u00a0 11.6343 (4.10)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 2;0 \u00a0 5.4310 (0.14)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 6 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_niquests_sync \u00a0 \u00a0 \u00a0 \u00a0 228.0948 (12.12)\u00a0 \u00a0 \u00a0 245.1454 (8.08) \u00a0 \u00a0 \u00a0 236.8987 (9.19) \u00a0 \u00a0 \u00a0 7.9569 (3.06) \u00a0 \u00a0 \u00a0 235.6501 (8.83)\u00a0 \u00a0 \u00a0 15.1074 (5.33)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 3;0 \u00a0 4.2212 (0.11)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 5 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_urllib_sync \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 340.0895 (18.07)\u00a0 \u00a0 \u00a0 407.2020 (13.43)\u00a0 \u00a0 \u00a0 378.0052 (14.67) \u00a0 \u00a0 25.1730 (9.67) \u00a0 \u00a0 \u00a0 377.3775 (14.14) \u00a0 \u00a0 31.8001 (11.22) \u00a0 \u00a0 \u00a0 \u00a0 2;0 \u00a0 2.6455 (0.07)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 5 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\ntest_requests_sync \u00a0 \u00a0 \u00a0 2,322.0456 (123.35) \u00a0 2,610.2015 (86.07)\u00a0 \u00a0 2,448.8615 (95.01)\u00a0 \u00a0 116.5830 (44.78)\u00a0 \u00a0 2,444.3720 (91.57)\u00a0 \u00a0 187.1698 (66.03) \u00a0 \u00a0 \u00a0 \u00a0 2;0 \u00a0 0.4084 (0.01)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 5 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nLegend:\n  Outliers: 1 Standard Deviation from Mean; 1.5 IQR (InterQuartile Range) from 1st Quartile and 3rd Quartile.\n  OPS: Operations Per Second, computed as 1 / Mean\n========================================================= 11 passed, 1131 warnings in 39.64s ==========================================================\n</code></pre></p> <p> Lower is better</p>"},{"location":"benchmarks/#feedback","title":"Feedback","text":"<p>If you have any ideas, comment, or thoughts on benchmark suite, feel free to discuss it on GitHub.</p>"},{"location":"faq/","title":"FAQ","text":"<pre><code>What is \"Gufo\"?\n</code></pre> <p>Gufo means the Owl in Italian.</p> <pre><code>Why the owls?\n</code></pre> <p>We love owls and the viable parts of our technologies were proven at the project, named \"the Owl\".</p> <pre><code>What is \"Gufo Labs\"?\n</code></pre> <p>Gufo Labs is the Milan-based company specialized on network and IT consulting, and on software research.</p> <pre><code>What is \"Gufo Stack\"?\n</code></pre> <p>We've extracted core components behind the NOC  and released them as independent packages, available under the terms  of the 3-clause BSD license. Our software shares common code quality standards  and is battle-proven under the high load. We hope our key components will help  the engineers and the developers to build reliable networks and robust network  management software.  See more for details.</p>"},{"location":"installation/","title":"Installation","text":"<p>Install with the pip</p> <pre><code>$ pip install gufo_http\n</code></pre>"},{"location":"installation/#checking-the-installation","title":"Checking the Installation","text":"<p>To check the installation just import the module</p> <pre><code>from gufo.http import __version__\n</code></pre>"},{"location":"installation/#upgrading","title":"Upgrading","text":"<p>To upgrade existing Gufo SNMP installation use pip</p> <pre><code>$ pip install --upgrade gufo_http\n</code></pre>"},{"location":"installation/#uninstalling","title":"Uninstalling","text":"<p>To uninstall Gufo HTTP use pip</p> <pre><code>$ pip uninstall gufo_http\n</code></pre>"},{"location":"dev/","title":"Gufo HTTP: Developer's Guide","text":"<p>This section is intended for Gufo HTTP developers and for entities,  including both individuals and companies, interested in contributing to the project.</p> <ul> <li>Developer's Environment</li> <li>Building and Testing</li> <li>Common Tasks</li> <li>Code Quality</li> <li>Code Base</li> <li>Contributing Guide</li> <li>Code of Conduct</li> <li>Supported Standards</li> </ul>"},{"location":"dev/CODE_OF_CONDUCT/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"dev/CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"dev/CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"dev/CODE_OF_CONDUCT/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"dev/CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"dev/CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at [INSERT CONTACT METHOD]. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"dev/CODE_OF_CONDUCT/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"dev/CODE_OF_CONDUCT/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"dev/CODE_OF_CONDUCT/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"dev/CODE_OF_CONDUCT/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"dev/CODE_OF_CONDUCT/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"dev/CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"dev/CONTRIBUTING/","title":"Types of contributions","text":"<p>You can contribute to the Gufo Labs projects in several way. This repo is a place to discuss and collaborate on GitHub! Our team is maintaining this repo to preserve our bandwidth, off topic conversations will be closed.</p>"},{"location":"dev/CONTRIBUTING/#discussions","title":"Discussions","text":"<p>Discussions are where we have conversations.</p> <p>If you'd like help troubleshooting a PR you're working on, have a great new idea, or want to share something amazing you've learned in our docs, join us in discussions.</p>"},{"location":"dev/CONTRIBUTING/#issues","title":"Issues","text":"<p>Issues are used to track tasks that contributors can help with. </p> <p>If you've found bug, or something in the content of the documentation that should be updated, search open issues to see if someone else has reported the same thing. If it's something new, open an issue. We'll use the issue to have a conversation about the problem you want to fix.</p>"},{"location":"dev/CONTRIBUTING/#pull-requests","title":"Pull requests","text":"<p>A pull request is a way to suggest changes in our repository.</p>"},{"location":"dev/codebase/","title":"Project's Code Base","text":"<p>The code base of the project has following structure:</p> <ul> <li><code>.devcontainer/</code> - Developer's container configuration for    VSCode Remote Containers. Just reopen   project in remote container to get ready-to-development   environment.</li> <li> <p><code>.github/</code> - GitHub settings</p> <ul> <li><code>workflows/</code> - GitHub Actions Workflows settings.   Used to run tests and build the documentation.</li> </ul> </li> <li> <p><code>docs/</code> - Mkdocs documentation.</p> </li> <li><code>examples/</code> - Project's examples.</li> <li><code>src/</code> - Project's source code.</li> <li><code>tests/</code> - Project's Pytest test suite.</li> <li><code>.gitignore</code> - Gitignore file.</li> <li><code>Dockerfile</code> - Dockerfile for development container.</li> <li><code>mkdocs.yml</code> - Mkdocs configuration file.</li> <li><code>pyproject.toml</code> - pyproject.toml file for python tools configuration.</li> </ul>"},{"location":"dev/codequality/","title":"Code Quality Guide","text":"<p>We share the common code quality standards between all Gufo Labs projects.</p>"},{"location":"dev/codequality/#python-code-formatting","title":"Python Code Formatting","text":"<p>All Python code must be formatting using ruff code formatter with settings defined in the project's <code>pyproject.toml</code> file.</p>"},{"location":"dev/codequality/#python-code-linting","title":"Python Code Linting","text":"<p>All Python code must pass ruff tests with the project's settings.</p>"},{"location":"dev/codequality/#python-code-static-checks","title":"Python Code Static Checks","text":"<p>All python code must pass Mypy type checks in the <code>strict</code> mode.</p>"},{"location":"dev/codequality/#test-suite-coverage","title":"Test Suite Coverage","text":"<p>The test suite must provide 100% code coverage whenever possible.</p>"},{"location":"dev/codequality/#documentation-standards","title":"Documentation Standards","text":"<ul> <li>Documentation must be clean and mean.</li> </ul>"},{"location":"dev/common/","title":"Developer's Common  Tasks","text":""},{"location":"dev/common/#bump-version","title":"Bump Version","text":"<ul> <li> Change <code>__version__</code> in <code>src/gufo/http/__init__.py</code></li> <li> Change <code>[package]/version</code> in <code>Cargo.toml</code></li> <li> Add section in <code>CHANGELOG.md</code></li> </ul>"},{"location":"dev/common/#bump-rust-version","title":"Bump Rust Version","text":"<ul> <li> Change <code>RUST_VERSION</code> in <code>tools/build/setup-rust.sh</code></li> </ul>"},{"location":"dev/common/#bump-pyo3-version","title":"Bump pyo3 version","text":"<ul> <li> Change <code>[dependencies]/pyo3</code> in <code>Cargo.toml</code></li> </ul>"},{"location":"dev/environment/","title":"Developer's Environment","text":"<p>To participate in development you need to prepare the developer's environment first. Depending on the preferable tools, your mileage may vary.</p>"},{"location":"dev/environment/#visual-studio-code-dev-container","title":"Visual Studio Code Dev Container","text":"<p>The easiest way to start the development is to use Visual Studio Code with Remote Containers plugin. Just click on the green sign in the lower-left corner and select the \"Reopen in Container\" menu item. You'll get all the required formatting and linting settings out of the box.</p>"},{"location":"dev/standards/","title":"Supported Standards","text":"<p>Gufo HTTP implements and is guided by the following standards:</p>"},{"location":"dev/standards/#python-pep","title":"Python PEP","text":"<ul> <li>PEP8: Style Guide for Python Code.</li> <li>PEP484: Type Hints</li> <li>PEP561: Distributing and Packaging Type Information.</li> </ul>"},{"location":"dev/testing/","title":"Building and Testing","text":"<p>Before starting building and testing package set up  Developer's Environment first. From here and below we consider the shell's current directory matches the project's root directory.</p>"},{"location":"dev/testing/#building-package","title":"Building Package","text":"<p>To test the package build run:</p> <pre><code>python -m build --sdist --wheel\n</code></pre> <p>Compiled packages will be available in the <code>dist/</code> directory.</p>"},{"location":"dev/testing/#rebuilding-rust-modules","title":"Rebuilding Rust Modules","text":"<p>To rebuild Rust modules for debug and testing:</p> <pre><code>python -m pip install --editable .\n</code></pre>"},{"location":"dev/testing/#running-tests","title":"Running tests","text":"<p>Rebuild rust modules, if changed:</p> <pre><code>python -m pip install --editable .\n</code></pre> <p>To run the test suit:</p> <pre><code>pytest -vv\n</code></pre>"},{"location":"dev/testing/#running-lints","title":"Running Lints","text":"<p>All lints are checked as part of GitHub Actions Workflow. You may run lints manually before committing to the project.</p>"},{"location":"dev/testing/#check-formatting","title":"Check Formatting","text":"<p>Python Code Formatting is the mandatory requirement in our Code Quality standards. To check code formatting run:</p> <pre><code>ruff format --check examples/ src/ tests/\n</code></pre> <p>To fix formatting errors run: <pre><code>ruff format examples/ src/ tests/\n</code></pre></p> <p>We recommend setting python code formatting on file saving (Done in VS Code Dev Container out of the box).</p>"},{"location":"dev/testing/#python-code-lints","title":"Python Code Lints","text":"<p>Python Code Linting is the mandatory requirement in our Code Quality standards. To check code for linting errors run:</p> <pre><code>ruff src/ tests/\n</code></pre>"},{"location":"dev/testing/#python-code-static-checks","title":"Python Code Static Checks","text":"<p>Python Code Static Checks is the mandatory requirement in our Code Quality standards. To check code for typing errors run:</p> <pre><code>mypy src/\n</code></pre>"},{"location":"dev/testing/#python-test-code-coverage-check","title":"Python Test Code Coverage Check","text":"<p>To evaluate code coverage run tests:</p> <pre><code>coverage run -m pytest -vv\n</code></pre> <p>To report the coverage after the test run:</p> <pre><code>coverage report\n</code></pre> <p>To show line-by-line coverage:</p> <pre><code>coverage html\n</code></pre> <p>Then open <code>dist/coverage/index.html</code> file in your browser.</p>"},{"location":"dev/testing/#building-documentation","title":"Building Documentation","text":"<p>To rebuild and check documentation run</p> <pre><code>mkdocs serve\n</code></pre> <p>We recommend using Grammarly service to check documentation for common errors.</p>"},{"location":"examples/","title":"Gufo HTTP: Examples","text":"<p>This part of the documentation contains a detailed explanation of the samples from the examples/ folder.</p> <ul> <li>sync: Synchronous mode.</li> <li>async: Asynchronous mode.</li> </ul>"},{"location":"examples/async/","title":"Gufo HTTP Examples: Async Mode","text":"<p>This part of the documentation contains a detailed explanation of the samples from the examples/async/ folder.</p> <ul> <li>get.py: Get Request</li> </ul>"},{"location":"examples/async/get/","title":"Gufo HTTP Example: Get Request","text":"<p><code>Get</code> is one of the basic HTTP operations allowing to download single page. We have mastered how to process synchronous get request in our get.py example. The asynchronous implementation is only slightly more complicated.</p> get.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.http.async_client import HttpClient\n\n\nasync def main(url: str) -&gt; None:\n    async with HttpClient() as client:\n        r = await client.get(url)\n        if r.status != 200:\n            print(f\"Invalid response code: {r.status}\")\n            return\n        print(r.content.decode())\n\n\nasyncio.run(main(sys.argv[1]))\n</code></pre> <p>Let's see the details. get.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.http.async_client import HttpClient\n\n\nasync def main(url: str) -&gt; None:\n    async with HttpClient() as client:\n        r = await client.get(url)\n        if r.status != 200:\n            print(f\"Invalid response code: {r.status}\")\n            return\n        print(r.content.decode())\n\n\nasyncio.run(main(sys.argv[1]))\n</code></pre></p> <p>To run async function from our synchronous script, so we need to import <code>asyncio</code> to use <code>asyncio.run()</code>.</p> <p>get.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.http.async_client import HttpClient\n\n\nasync def main(url: str) -&gt; None:\n    async with HttpClient() as client:\n        r = await client.get(url)\n        if r.status != 200:\n            print(f\"Invalid response code: {r.status}\")\n            return\n        print(r.content.decode())\n\n\nasyncio.run(main(sys.argv[1]))\n</code></pre> Import <code>sys</code> module to parse the CLI argument.</p> <p>Warning</p> <p>We use <code>sys.argv</code> only for demonstration purposes. Use <code>argsparse</code> or alternatives in real-world applications.</p> get.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.http.async_client import HttpClient\n\n\nasync def main(url: str) -&gt; None:\n    async with HttpClient() as client:\n        r = await client.get(url)\n        if r.status != 200:\n            print(f\"Invalid response code: {r.status}\")\n            return\n        print(r.content.decode())\n\n\nasyncio.run(main(sys.argv[1]))\n</code></pre> <p><code>HttpClient</code> object holds all necessary API. We're using an asynchronous version from <code>gufo.http.async_client</code>.</p> get.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.http.async_client import HttpClient\n\n\nasync def main(url: str) -&gt; None:\n    async with HttpClient() as client:\n        r = await client.get(url)\n        if r.status != 200:\n            print(f\"Invalid response code: {r.status}\")\n            return\n        print(r.content.decode())\n\n\nasyncio.run(main(sys.argv[1]))\n</code></pre> <p>We define our asychronous main function and expect resource URL.</p> get.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.http.async_client import HttpClient\n\n\nasync def main(url: str) -&gt; None:\n    async with HttpClient() as client:\n        r = await client.get(url)\n        if r.status != 200:\n            print(f\"Invalid response code: {r.status}\")\n            return\n        print(r.content.decode())\n\n\nasyncio.run(main(sys.argv[1]))\n</code></pre> <p>First, we need to create <code>HttpClient</code> object which wraps the client's session. The <code>HttpClient</code> may be used as an instance directly or operated as asynchronous context manager using the <code>async with</code> clause. When used as a context manager, the client automatically closes all connections on the exit of context, so its lifetime is defined explicitly.</p> <p><code>HttpClient</code> constructor offers lots of configuration variables for fine-tuning. Refer to the  HttpClient reference for further details. In our example we use default settings.</p> <p>get.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.http.async_client import HttpClient\n\n\nasync def main(url: str) -&gt; None:\n    async with HttpClient() as client:\n        r = await client.get(url)\n        if r.status != 200:\n            print(f\"Invalid response code: {r.status}\")\n            return\n        print(r.content.decode())\n\n\nasyncio.run(main(sys.argv[1]))\n</code></pre> <code>.get()</code> method starts a HTTP GET request and await for response headers. It assepts an url as mandatary argument and returns a <code>SyncResponse</code> instance. The function is asyncronous and needs to be awaited.</p> <p>get.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.http.async_client import HttpClient\n\n\nasync def main(url: str) -&gt; None:\n    async with HttpClient() as client:\n        r = await client.get(url)\n        if r.status != 200:\n            print(f\"Invalid response code: {r.status}\")\n            return\n        print(r.content.decode())\n\n\nasyncio.run(main(sys.argv[1]))\n</code></pre> We can inspect response code and headers without reading whole response body. For our example we just check the status code is 200 OK.</p> <p>get.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.http.async_client import HttpClient\n\n\nasync def main(url: str) -&gt; None:\n    async with HttpClient() as client:\n        r = await client.get(url)\n        if r.status != 200:\n            print(f\"Invalid response code: {r.status}\")\n            return\n        print(r.content.decode())\n\n\nasyncio.run(main(sys.argv[1]))\n</code></pre> If status code is not OK, we print and error message and terminate our function.</p> <p>get.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.http.async_client import HttpClient\n\n\nasync def main(url: str) -&gt; None:\n    async with HttpClient() as client:\n        r = await client.get(url)\n        if r.status != 200:\n            print(f\"Invalid response code: {r.status}\")\n            return\n        print(r.content.decode())\n\n\nasyncio.run(main(sys.argv[1]))\n</code></pre> The <code>.content</code> attribute of <code>Response</code> contains the response body. This attribute has type of <code>bytes</code>, so we convert it into <code>str</code> using <code>.decode()</code> method. In our example we consider the response is encoding using UTF-8 encoding. Then we print decoded result.</p> <p>get.py<pre><code>import asyncio\nimport sys\n\nfrom gufo.http.async_client import HttpClient\n\n\nasync def main(url: str) -&gt; None:\n    async with HttpClient() as client:\n        r = await client.get(url)\n        if r.status != 200:\n            print(f\"Invalid response code: {r.status}\")\n            return\n        print(r.content.decode())\n\n\nasyncio.run(main(sys.argv[1]))\n</code></pre> Lets run our <code>main()</code> function pass first command-line parameter as url.</p>"},{"location":"examples/async/get/#running","title":"Running","text":"<p>Let's check our script. Run example as:</p> <pre><code>$ python3 examples/async/get.py https://gufolabs.com/\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n...\n</code></pre>"},{"location":"examples/sync/","title":"Gufo HTTP Examples: Sync Mode.","text":"<p>This part of the documentation contains a detailed explanation of the samples from the examples/sync/ folder.</p> <ul> <li>get.py: Get Request</li> </ul>"},{"location":"examples/sync/get/","title":"Gufo HTTP Example: Get Request","text":"<p><code>Get</code> is one of the basic HTTP operations allowing to download single page.</p> get.py<pre><code>import sys\n\nfrom gufo.http.sync_client import HttpClient\n\n\ndef main(url: str) -&gt; None:\n    with HttpClient() as client:\n        r = client.get(url)\n        if r.status != 200:\n            print(f\"Invalid response code: {r.status}\")\n            return\n        print(r.content.decode())\n\n\nmain(sys.argv[1])\n</code></pre> <p>Let's see the details.</p> <p>get.py<pre><code>import sys\n\nfrom gufo.http.sync_client import HttpClient\n\n\ndef main(url: str) -&gt; None:\n    with HttpClient() as client:\n        r = client.get(url)\n        if r.status != 200:\n            print(f\"Invalid response code: {r.status}\")\n            return\n        print(r.content.decode())\n\n\nmain(sys.argv[1])\n</code></pre> Import <code>sys</code> module to parse the CLI argument.</p> <p>Warning</p> <p>We use <code>sys.argv</code> only for demonstration purposes. Use <code>argsparse</code> or alternatives in real-world applications.</p> get.py<pre><code>import sys\n\nfrom gufo.http.sync_client import HttpClient\n\n\ndef main(url: str) -&gt; None:\n    with HttpClient() as client:\n        r = client.get(url)\n        if r.status != 200:\n            print(f\"Invalid response code: {r.status}\")\n            return\n        print(r.content.decode())\n\n\nmain(sys.argv[1])\n</code></pre> <p><code>HttpClient</code> object holds all necessary API. We're using a synchronous version from <code>gufo.http.sync_client</code>.</p> get.py<pre><code>import sys\n\nfrom gufo.http.sync_client import HttpClient\n\n\ndef main(url: str) -&gt; None:\n    with HttpClient() as client:\n        r = client.get(url)\n        if r.status != 200:\n            print(f\"Invalid response code: {r.status}\")\n            return\n        print(r.content.decode())\n\n\nmain(sys.argv[1])\n</code></pre> <p>We define our main function and expect resource URL.</p> get.py<pre><code>import sys\n\nfrom gufo.http.sync_client import HttpClient\n\n\ndef main(url: str) -&gt; None:\n    with HttpClient() as client:\n        r = client.get(url)\n        if r.status != 200:\n            print(f\"Invalid response code: {r.status}\")\n            return\n        print(r.content.decode())\n\n\nmain(sys.argv[1])\n</code></pre> <p>First, we need to create <code>HttpClient</code> object which wraps the client's session. The <code>HttpClient</code> may be used as an instance directly or operated as context manager using the <code>with</code> clause. When used as a context manager, the client automatically closes all connections on the exit of context, so its lifetime is defined explicitly.</p> <p><code>HttpClient</code> constructor offers lots of configuration variables for fine-tuning. Refer to the  HttpClient reference for further details. In our example we use default settings.</p> <p>get.py<pre><code>import sys\n\nfrom gufo.http.sync_client import HttpClient\n\n\ndef main(url: str) -&gt; None:\n    with HttpClient() as client:\n        r = client.get(url)\n        if r.status != 200:\n            print(f\"Invalid response code: {r.status}\")\n            return\n        print(r.content.decode())\n\n\nmain(sys.argv[1])\n</code></pre> <code>.get()</code> method starts a HTTP GET request and await for response headers. It assepts an url as mandatary argument and returns a <code>SyncResponse</code> instance.</p> <p>get.py<pre><code>import sys\n\nfrom gufo.http.sync_client import HttpClient\n\n\ndef main(url: str) -&gt; None:\n    with HttpClient() as client:\n        r = client.get(url)\n        if r.status != 200:\n            print(f\"Invalid response code: {r.status}\")\n            return\n        print(r.content.decode())\n\n\nmain(sys.argv[1])\n</code></pre> We can inspect response code and headers without reading whole response body. For our example we just check the status code is 200 OK.</p> <p>get.py<pre><code>import sys\n\nfrom gufo.http.sync_client import HttpClient\n\n\ndef main(url: str) -&gt; None:\n    with HttpClient() as client:\n        r = client.get(url)\n        if r.status != 200:\n            print(f\"Invalid response code: {r.status}\")\n            return\n        print(r.content.decode())\n\n\nmain(sys.argv[1])\n</code></pre> If status code is not OK, we print and error message and terminate our function.</p> <p>get.py<pre><code>import sys\n\nfrom gufo.http.sync_client import HttpClient\n\n\ndef main(url: str) -&gt; None:\n    with HttpClient() as client:\n        r = client.get(url)\n        if r.status != 200:\n            print(f\"Invalid response code: {r.status}\")\n            return\n        print(r.content.decode())\n\n\nmain(sys.argv[1])\n</code></pre> The <code>.content</code> attribute of <code>Response</code> contains the response body. This attribute has type of <code>bytes</code>, so we convert it into <code>str</code> using <code>.decode()</code> method. In our example we consider the response is encoding using UTF-8 encoding. Then we print decoded result.</p> <p>get.py<pre><code>import sys\n\nfrom gufo.http.sync_client import HttpClient\n\n\ndef main(url: str) -&gt; None:\n    with HttpClient() as client:\n        r = client.get(url)\n        if r.status != 200:\n            print(f\"Invalid response code: {r.status}\")\n            return\n        print(r.content.decode())\n\n\nmain(sys.argv[1])\n</code></pre> Lets run our <code>main()</code> function pass first command-line parameter as url.</p>"},{"location":"examples/sync/get/#running","title":"Running","text":"<p>Let's check our script. Run example as:</p> <pre><code>$ python3 examples/sync/get.py https://gufolabs.com/\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n...\n</code></pre>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>gufo.http<ul> <li>_fast</li> <li>async_client</li> <li>cli</li> <li>httpd</li> <li>sync_client</li> <li>util</li> </ul> </li> </ul>"},{"location":"reference/gufo/http/","title":"gufo.http","text":"<p>Gufo HTTP: The accelerated Python HTTP client library.</p> <p>Attributes:</p> Name Type Description <code>__version__</code> <code>str</code> <p>Current version.</p>"},{"location":"reference/gufo/http/#gufo.http.BROTLI","title":"<code>BROTLI = 4</code>  <code>module-attribute</code>","text":"<p>int([x]) -&gt; integer int(x, base=10) -&gt; integer</p> <p>Convert a number or string to an integer, or return 0 if no arguments are given.  If x is a number, return x.int().  For floating point numbers, this truncates towards zero.</p> <p>If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base.  The literal can be preceded by '+' or '-' and be surrounded by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal.</p> <p>int('0b100', base=0) 4</p>"},{"location":"reference/gufo/http/#gufo.http.DEFLATE","title":"<code>DEFLATE = 1</code>  <code>module-attribute</code>","text":"<p>int([x]) -&gt; integer int(x, base=10) -&gt; integer</p> <p>Convert a number or string to an integer, or return 0 if no arguments are given.  If x is a number, return x.int().  For floating point numbers, this truncates towards zero.</p> <p>If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base.  The literal can be preceded by '+' or '-' and be surrounded by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal.</p> <p>int('0b100', base=0) 4</p>"},{"location":"reference/gufo/http/#gufo.http.GZIP","title":"<code>GZIP = 2</code>  <code>module-attribute</code>","text":"<p>int([x]) -&gt; integer int(x, base=10) -&gt; integer</p> <p>Convert a number or string to an integer, or return 0 if no arguments are given.  If x is a number, return x.int().  For floating point numbers, this truncates towards zero.</p> <p>If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base.  The literal can be preceded by '+' or '-' and be surrounded by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal.</p> <p>int('0b100', base=0) 4</p>"},{"location":"reference/gufo/http/#gufo.http.RequestMethod","title":"<code>RequestMethod</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Request methods.</p>"},{"location":"reference/gufo/http/_fast/","title":"gufo.http._fast","text":"<p>Internal implementation in native codes.</p> <p>This mode contains an Gufo HTTP internals implemeted in the native codes. You shouldn't import implementations from _fast directly.</p> <p>Attributes:</p> Name Type Description <code>DEFLATE</code> <code>int</code> <p>Deflate method for <code>compression</code> argument.</p> <code>GZIP</code> <code>int</code> <p>GZIP method for <code>compression</code> argument.</p> <code>BROTLI</code> <code>int</code> <p>Brotli method for <code>compression</code> argument.</p>"},{"location":"reference/gufo/http/_fast/#gufo.http._fast.BROTLI","title":"<code>BROTLI = 4</code>  <code>module-attribute</code>","text":"<p>int([x]) -&gt; integer int(x, base=10) -&gt; integer</p> <p>Convert a number or string to an integer, or return 0 if no arguments are given.  If x is a number, return x.int().  For floating point numbers, this truncates towards zero.</p> <p>If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base.  The literal can be preceded by '+' or '-' and be surrounded by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal.</p> <p>int('0b100', base=0) 4</p>"},{"location":"reference/gufo/http/_fast/#gufo.http._fast.DEFLATE","title":"<code>DEFLATE = 1</code>  <code>module-attribute</code>","text":"<p>int([x]) -&gt; integer int(x, base=10) -&gt; integer</p> <p>Convert a number or string to an integer, or return 0 if no arguments are given.  If x is a number, return x.int().  For floating point numbers, this truncates towards zero.</p> <p>If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base.  The literal can be preceded by '+' or '-' and be surrounded by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal.</p> <p>int('0b100', base=0) 4</p>"},{"location":"reference/gufo/http/_fast/#gufo.http._fast.GZIP","title":"<code>GZIP = 2</code>  <code>module-attribute</code>","text":"<p>int([x]) -&gt; integer int(x, base=10) -&gt; integer</p> <p>Convert a number or string to an integer, or return 0 if no arguments are given.  If x is a number, return x.int().  For floating point numbers, this truncates towards zero.</p> <p>If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base.  The literal can be preceded by '+' or '-' and be surrounded by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal.</p> <p>int('0b100', base=0) 4</p>"},{"location":"reference/gufo/http/_fast/#gufo.http._fast.ZSTD","title":"<code>ZSTD = 8</code>  <code>module-attribute</code>","text":"<p>int([x]) -&gt; integer int(x, base=10) -&gt; integer</p> <p>Convert a number or string to an integer, or return 0 if no arguments are given.  If x is a number, return x.int().  For floating point numbers, this truncates towards zero.</p> <p>If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base.  The literal can be preceded by '+' or '-' and be surrounded by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal.</p> <p>int('0b100', base=0) 4</p>"},{"location":"reference/gufo/http/_fast/#gufo.http._fast.__all__","title":"<code>__all__ = ['HttpError', 'RequestError', 'RedirectError', 'RequestMethod', 'DEFLATE', 'GZIP', 'BROTLI', 'ZSTD', 'AuthBase', 'BasicAuth', 'BearerAuth', 'Proxy', 'Headers', 'Response', 'AsyncClient', 'SyncClient']</code>  <code>module-attribute</code>","text":"<p>Built-in mutable sequence.</p> <p>If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified.</p>"},{"location":"reference/gufo/http/_fast/#gufo.http._fast.__doc__","title":"<code>__doc__ = \"Internal implementation in native codes.\\n\\nThis mode contains an Gufo HTTP internals\\nimplemeted in the native codes.\\nYou shouldn't import implementations from\\n_fast directly.\\n\\nAttributes:\\n    DEFLATE: Deflate method for `compression` argument.\\n    GZIP: GZIP method for `compression` argument.\\n    BROTLI: Brotli method for `compression` argument.\"</code>  <code>module-attribute</code>","text":"<p>str(object='') -&gt; str str(bytes_or_buffer[, encoding[, errors]]) -&gt; str</p> <p>Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.str() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'.</p>"},{"location":"reference/gufo/http/_fast/#gufo.http._fast.__file__","title":"<code>__file__ = '/home/runner/work/gufo_http/gufo_http/src/gufo/http/_fast.cpython-312-x86_64-linux-gnu.so'</code>  <code>module-attribute</code>","text":"<p>str(object='') -&gt; str str(bytes_or_buffer[, encoding[, errors]]) -&gt; str</p> <p>Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.str() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'.</p>"},{"location":"reference/gufo/http/_fast/#gufo.http._fast.__name__","title":"<code>__name__ = 'gufo.http._fast'</code>  <code>module-attribute</code>","text":"<p>str(object='') -&gt; str str(bytes_or_buffer[, encoding[, errors]]) -&gt; str</p> <p>Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.str() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'.</p>"},{"location":"reference/gufo/http/_fast/#gufo.http._fast.__package__","title":"<code>__package__ = 'gufo.http'</code>  <code>module-attribute</code>","text":"<p>str(object='') -&gt; str str(bytes_or_buffer[, encoding[, errors]]) -&gt; str</p> <p>Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.str() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'.</p>"},{"location":"reference/gufo/http/async_client/","title":"gufo.http.async_client","text":"<p>Asynchronous client.</p>"},{"location":"reference/gufo/http/async_client/#gufo.http.async_client.HttpClient","title":"<code>HttpClient</code>","text":"<p>               Bases: <code>object</code></p> <p>Asynchronous HTTP client.</p> <p>Attributes:</p> Name Type Description <code>headers</code> <code>Optional[Dict[str, bytes]]</code> <p>Headers to be added to every request. Used in subclasses.</p> <code>user_agent</code> <p>Default user agent.</p> <p>Parameters:</p> Name Type Description Default <code>max_redirects</code> <code>Optional[int]</code> <p>Set up redirects policy:</p> <ul> <li>None: Disable automatic redirect processing.</li> <li>0: Deny redirects. Will raise <code>RedirectError</code>     on 3xx response.</li> <li>&gt;0: Follow redirects automatically. Will raise     <code>RedirectError</code> when redirects limit exceeded.</li> </ul> <code>MAX_REDIRECTS</code> <code>compression</code> <code>Optional[int]</code> <p>Acceptable compression methods, must be a combination of <code>DEFLATE</code>, <code>GZIP</code>, <code>BROTLI</code>, and <code>ZSTD</code>. Set to <code>None</code> to disable compression support.</p> <code>DEFLATE | GZIP | BROTLI</code> <code>validate_cert</code> <code>bool</code> <p>Set to <code>False</code> to disable TLS certificate validation. Otherwise, raise <code>ConnectionError</code> on invalid certificates.</p> <code>True</code> <code>connect_timeout</code> <code>float</code> <p>Timeout to establish connection, in seconds.</p> <code>DEFAULT_CONNECT_TIMEOUT</code> <code>timeout</code> <code>float</code> <p>Request timeout, in seconds.</p> <code>DEFAULT_TIMEOUT</code> <code>auth</code> <code>Optional[AuthBase]</code> <p>Authentication settings.</p> <code>None</code> <code>proxy</code> <code>Optional[List[Proxy]]</code> <p>Optional list of Proxy istances.</p> <code>None</code>"},{"location":"reference/gufo/http/async_client/#gufo.http.async_client.HttpClient.__aenter__","title":"<code>__aenter__()</code>  <code>async</code>","text":"<p>Asynchronous context manager entry.</p> Example <pre><code>async with HttpClient() as client:\n    ...\n</code></pre>"},{"location":"reference/gufo/http/async_client/#gufo.http.async_client.HttpClient.__aexit__","title":"<code>__aexit__(exc_type, exc_val, exc_tb)</code>  <code>async</code>","text":"<p>Asynchronous context manager exit.</p>"},{"location":"reference/gufo/http/async_client/#gufo.http.async_client.HttpClient.delete","title":"<code>delete(url, /, headers=None)</code>  <code>async</code>","text":"<p>Send HTTP DELETE request and receive a response.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>Request url, use <code>*</code> to get options for server.</p> required <code>headers</code> <code>Optional[Dict[str, bytes]]</code> <p>Optional request headers.</p> <code>None</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response instance.</p> <p>Raises:</p> Type Description <code>TimeoutError</code> <p>on timeouts.</p> <code>ConnectionError</code> <p>when failed to establish connection.</p> <code>RedirectError</code> <p>when redirects limit reached.</p> <code>RequestError</code> <p>on other errors related with request processing.</p>"},{"location":"reference/gufo/http/async_client/#gufo.http.async_client.HttpClient.get","title":"<code>get(url, /, headers=None)</code>  <code>async</code>","text":"<p>Send HTTP GET request and receive a response.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>Request url</p> required <code>headers</code> <code>Optional[Dict[str, bytes]]</code> <p>Optional request headers</p> <code>None</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response instance.</p> <p>Raises:</p> Type Description <code>TimeoutError</code> <p>on timeouts.</p> <code>ConnectionError</code> <p>when failed to establish connection.</p> <code>RedirectError</code> <p>when redirects limit reached.</p> <code>RequestError</code> <p>on other errors related with request processing.</p>"},{"location":"reference/gufo/http/async_client/#gufo.http.async_client.HttpClient.head","title":"<code>head(url, /, headers=None)</code>  <code>async</code>","text":"<p>Send HTTP HEAD request and receive a response.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>Request url</p> required <code>headers</code> <code>Optional[Dict[str, bytes]]</code> <p>Optional request headers</p> <code>None</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response instance.</p> <p>Raises:</p> Type Description <code>TimeoutError</code> <p>on timeouts.</p> <code>ConnectionError</code> <p>when failed to establish connection.</p> <code>RedirectError</code> <p>when redirects limit reached.</p> <code>RequestError</code> <p>on other errors related with request processing.</p>"},{"location":"reference/gufo/http/async_client/#gufo.http.async_client.HttpClient.options","title":"<code>options(url, /, headers=None)</code>  <code>async</code>","text":"<p>Send HTTP OPTIONS request and receive a response.</p> <p>Usually returns <code>204 No content</code> response.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>Request url, use <code>*</code> to get options for server.</p> required <code>headers</code> <code>Optional[Dict[str, bytes]]</code> <p>Optional request headers.</p> <code>None</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response instance.</p> <p>Raises:</p> Type Description <code>TimeoutError</code> <p>on timeouts.</p> <code>ConnectionError</code> <p>when failed to establish connection.</p> <code>RedirectError</code> <p>when redirects limit reached.</p> <code>RequestError</code> <p>on other errors related with request processing.</p>"},{"location":"reference/gufo/http/async_client/#gufo.http.async_client.HttpClient.patch","title":"<code>patch(url, body, /, headers=None)</code>  <code>async</code>","text":"<p>Send HTTP PATCH request and receive a response.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>Request url, use <code>*</code> to get options for server.</p> required <code>body</code> <code>bytes</code> <p>Request body.</p> required <code>headers</code> <code>Optional[Dict[str, bytes]]</code> <p>Optional request headers.</p> <code>None</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response instance.</p> <p>Raises:</p> Type Description <code>TimeoutError</code> <p>on timeouts.</p> <code>ConnectionError</code> <p>when failed to establish connection.</p> <code>RedirectError</code> <p>when redirects limit reached.</p> <code>RequestError</code> <p>on other errors related with request processing.</p>"},{"location":"reference/gufo/http/async_client/#gufo.http.async_client.HttpClient.post","title":"<code>post(url, body, /, headers=None)</code>  <code>async</code>","text":"<p>Send HTTP POST request and receive a response.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>Request url, use <code>*</code> to get options for server.</p> required <code>body</code> <code>bytes</code> <p>Request body.</p> required <code>headers</code> <code>Optional[Dict[str, bytes]]</code> <p>Optional request headers.</p> <code>None</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response instance.</p> <p>Raises:</p> Type Description <code>TimeoutError</code> <p>on timeouts.</p> <code>ConnectionError</code> <p>when failed to establish connection.</p> <code>RedirectError</code> <p>when redirects limit reached.</p> <code>RequestError</code> <p>on other errors related with request processing.</p>"},{"location":"reference/gufo/http/async_client/#gufo.http.async_client.HttpClient.put","title":"<code>put(url, body, /, headers=None)</code>  <code>async</code>","text":"<p>Send HTTP PUT request and receive a response.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>Request url, use <code>*</code> to get options for server.</p> required <code>body</code> <code>bytes</code> <p>Request body.</p> required <code>headers</code> <code>Optional[Dict[str, bytes]]</code> <p>Optional request headers.</p> <code>None</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response instance.</p> <p>Raises:</p> Type Description <code>TimeoutError</code> <p>on timeouts.</p> <code>ConnectionError</code> <p>when failed to establish connection.</p> <code>RedirectError</code> <p>when redirects limit reached.</p> <code>RequestError</code> <p>on other errors related with request processing.</p>"},{"location":"reference/gufo/http/async_client/#gufo.http.async_client.HttpClient.request","title":"<code>request(method, url, /, body=None, headers=None)</code>  <code>async</code>","text":"<p>Send HTTP request and receive a response.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>RequestMethod</code> <p>Request method</p> required <code>url</code> <code>str</code> <p>Request url</p> required <code>body</code> <code>Optional[bytes]</code> <p>Request body</p> <code>None</code> <code>headers</code> <code>Optional[Dict[str, bytes]]</code> <p>Optional request headers</p> <code>None</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response instance.</p> <p>Raises:</p> Type Description <code>TimeoutError</code> <p>on timeouts.</p> <code>ConnectionError</code> <p>when failed to establish connection.</p> <code>RedirectError</code> <p>when redirects limit reached.</p> <code>RequestError</code> <p>on other errors related with request processing.</p>"},{"location":"reference/gufo/http/cli/","title":"gufo.http.cli","text":"<p><code>gufo-http</code> command-line utility.</p> <p>Attributes:</p> Name Type Description <code>NAME</code> <p>Utility name</p>"},{"location":"reference/gufo/http/cli/#gufo.http.cli.Cli","title":"<code>Cli</code>","text":"<p>               Bases: <code>object</code></p> <p><code>gufo-thor</code> CLI utility class.</p>"},{"location":"reference/gufo/http/cli/#gufo.http.cli.Cli.die","title":"<code>die(msg=None)</code>","text":"<p>Die with message.</p>"},{"location":"reference/gufo/http/cli/#gufo.http.cli.Cli.run","title":"<code>run(args)</code>","text":"<p>Parse command-line arguments and run appropriate command.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>List[str]</code> <p>List of command-line arguments</p> required <p>Returns:     ExitCode</p>"},{"location":"reference/gufo/http/cli/#gufo.http.cli.ExitCode","title":"<code>ExitCode</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Cli exit codes.</p> <p>Attributes:</p> Name Type Description <code>OK</code> <p>Successful exit</p>"},{"location":"reference/gufo/http/cli/#gufo.http.cli.main","title":"<code>main()</code>","text":"<p>Run <code>noc-thor</code> with command-line arguments.</p>"},{"location":"reference/gufo/http/httpd/","title":"gufo.http.httpd","text":"<p>Httpd context manager for tests.</p>"},{"location":"reference/gufo/http/httpd/#gufo.http.httpd.Httpd","title":"<code>Httpd</code>","text":"<p>               Bases: <code>object</code></p> <p>Httpd test context manager.</p> <p>Attributes:</p> Name Type Description <code>prefix</code> <p>URL prefix.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Optional[str]</code> <p>nginx binary path. Auto-detect if None.</p> <code>None</code> <code>address</code> <code>str</code> <p>Listen address.</p> <code>'127.0.0.1'</code> <code>port</code> <code>int</code> <p>Listen port.</p> <code>10080</code> <code>host</code> <code>str</code> <p>Server hostname.</p> <code>'local.gufolabs.com'</code> <code>start_timeout</code> <code>float</code> <p>Maximum time to wait for nginx to start.</p> <code>5.0</code> <code>check_config</code> <code>bool</code> <p>Check nginx config on startup.</p> <code>True</code> <code>mode</code> <code>HttpdMode</code> <p>HTTP or HTTPS</p> <code>HTTP</code>"},{"location":"reference/gufo/http/httpd/#gufo.http.httpd.Httpd.__aenter__","title":"<code>__aenter__()</code>  <code>async</code>","text":"<p>Asynchronous context manager entry.</p>"},{"location":"reference/gufo/http/httpd/#gufo.http.httpd.Httpd.__aexit__","title":"<code>__aexit__(exc_type, exc_val, exc_tb)</code>  <code>async</code>","text":"<p>Asynchronous context manager exit.</p>"},{"location":"reference/gufo/http/httpd/#gufo.http.httpd.Httpd.__enter__","title":"<code>__enter__()</code>","text":"<p>Context manager entry.</p>"},{"location":"reference/gufo/http/httpd/#gufo.http.httpd.Httpd.__exit__","title":"<code>__exit__(exc_type, exc_val, exc_tb)</code>","text":"<p>Context manager exit.</p>"},{"location":"reference/gufo/http/httpd/#gufo.http.httpd.Httpd.expand_url","title":"<code>expand_url(tpl)</code>","text":"<p>Expand url template.</p> <p>Replace:</p> <ul> <li><code>{port}</code> - server's port</li> <li><code>{hostname}</code> - current host's name.</li> </ul>"},{"location":"reference/gufo/http/httpd/#gufo.http.httpd.Httpd.get_config","title":"<code>get_config(prefix)</code>","text":"<p>Generate nginx.conf.</p>"},{"location":"reference/gufo/http/httpd/#gufo.http.httpd.HttpdMode","title":"<code>HttpdMode</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Httpd mode.</p> <p>Attributes:</p> Name Type Description <code>HTTP</code> <p>HTTP Mode.</p> <code>HTTPS</code> <p>HTTPS Mode.</p>"},{"location":"reference/gufo/http/sync_client/","title":"gufo.http.sync_client","text":"<p>Synchronous client.</p>"},{"location":"reference/gufo/http/sync_client/#gufo.http.sync_client.HttpClient","title":"<code>HttpClient</code>","text":"<p>               Bases: <code>object</code></p> <p>Synchronous HTTP client.</p> <p>Attributes:</p> Name Type Description <code>headers</code> <code>Optional[Dict[str, bytes]]</code> <p>Headers to be added to every request. Used in subclasses.</p> <code>user_agent</code> <p>Default user agent.</p> <p>Parameters:</p> Name Type Description Default <code>max_redirects</code> <code>Optional[int]</code> <p>Set up redirects policy:</p> <ul> <li>None: Disable automatic redirect processing.</li> <li>0: Deny redirects. Will raise <code>RedirectError</code>     on 3xx response.</li> <li>&gt;0: Follow redirects automatically. Will raise     <code>RedirectError</code> when redirects limit exceeded.</li> </ul> <code>MAX_REDIRECTS</code> <code>compression</code> <code>Optional[int]</code> <p>Acceptable compression methods, must be a combination of <code>DEFLATE</code>, <code>GZIP</code>, <code>BROTLI</code>, and <code>ZSTD</code>. Set to <code>None</code> to disable compression support.</p> <code>DEFLATE | GZIP | BROTLI</code> <code>validate_cert</code> <code>bool</code> <p>Set to <code>False</code> to disable TLS certificate validation. Otherwise, raise <code>ConnectionError</code> on invalid certificates.</p> <code>True</code> <code>connect_timeout</code> <code>float</code> <p>Timeout to establish connection, in seconds.</p> <code>DEFAULT_CONNECT_TIMEOUT</code> <code>timeout</code> <code>float</code> <p>Request timeout, in seconds.</p> <code>DEFAULT_TIMEOUT</code> <code>auth</code> <code>Optional[AuthBase]</code> <p>Authentication settings.</p> <code>None</code> <code>proxy</code> <code>Optional[List[Proxy]]</code> <p>Optional list of Proxy istances.</p> <code>None</code>"},{"location":"reference/gufo/http/sync_client/#gufo.http.sync_client.HttpClient.__enter__","title":"<code>__enter__()</code>","text":"<p>Context manager entry.</p> Example <pre><code>with HttpClient() as client:\n    ...\n</code></pre>"},{"location":"reference/gufo/http/sync_client/#gufo.http.sync_client.HttpClient.__exit__","title":"<code>__exit__(exc_type, exc_val, exc_tb)</code>","text":"<p>Context manager exit.</p>"},{"location":"reference/gufo/http/sync_client/#gufo.http.sync_client.HttpClient.delete","title":"<code>delete(url, /, headers=None)</code>","text":"<p>Send HTTP DELETE request and receive a response.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>Request url, use <code>*</code> to get options for server.</p> required <code>headers</code> <code>Optional[Dict[str, bytes]]</code> <p>Optional request headers.</p> <code>None</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response instance.</p> <p>Raises:</p> Type Description <code>TimeoutError</code> <p>on timeouts.</p> <code>ConnectionError</code> <p>when failed to establish connection.</p> <code>RedirectError</code> <p>when redirects limit reached.</p> <code>RequestError</code> <p>on other errors related with request processing.</p>"},{"location":"reference/gufo/http/sync_client/#gufo.http.sync_client.HttpClient.get","title":"<code>get(url, /, headers=None)</code>","text":"<p>Send HTTP GET request and receive a response.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>Request url</p> required <code>headers</code> <code>Optional[Dict[str, bytes]]</code> <p>Optional request headers</p> <code>None</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response instance.</p> <p>Raises:</p> Type Description <code>TimeoutError</code> <p>on timeouts.</p> <code>ConnectionError</code> <p>when failed to establish connection.</p> <code>RedirectError</code> <p>when redirects limit reached.</p> <code>RequestError</code> <p>on other errors related with request processing.</p>"},{"location":"reference/gufo/http/sync_client/#gufo.http.sync_client.HttpClient.head","title":"<code>head(url, /, headers=None)</code>","text":"<p>Send HTTP HEAD request and receive a response.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>Request url</p> required <code>headers</code> <code>Optional[Dict[str, bytes]]</code> <p>Optional request headers</p> <code>None</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response instance.</p> <p>Raises:</p> Type Description <code>TimeoutError</code> <p>on timeouts.</p> <code>ConnectionError</code> <p>when failed to establish connection.</p> <code>RedirectError</code> <p>when redirects limit reached.</p> <code>RequestError</code> <p>on other errors related with request processing.</p>"},{"location":"reference/gufo/http/sync_client/#gufo.http.sync_client.HttpClient.options","title":"<code>options(url, /, headers=None)</code>","text":"<p>Send HTTP OPTIONS request and receive a response.</p> <p>Usually returns <code>204 No content</code> response.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>Request url, use <code>*</code> to get options for server.</p> required <code>headers</code> <code>Optional[Dict[str, bytes]]</code> <p>Optional request headers.</p> <code>None</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response instance.</p> <p>Raises:</p> Type Description <code>TimeoutError</code> <p>on timeouts.</p> <code>ConnectionError</code> <p>when failed to establish connection.</p> <code>RedirectError</code> <p>when redirects limit reached.</p> <code>RequestError</code> <p>on other errors related with request processing.</p>"},{"location":"reference/gufo/http/sync_client/#gufo.http.sync_client.HttpClient.patch","title":"<code>patch(url, body, /, headers=None)</code>","text":"<p>Send HTTP PATCH request and receive a response.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>Request url, use <code>*</code> to get options for server.</p> required <code>body</code> <code>bytes</code> <p>Request body.</p> required <code>headers</code> <code>Optional[Dict[str, bytes]]</code> <p>Optional request headers.</p> <code>None</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response instance.</p> <p>Raises:</p> Type Description <code>TimeoutError</code> <p>on timeouts.</p> <code>ConnectionError</code> <p>when failed to establish connection.</p> <code>RedirectError</code> <p>when redirects limit reached.</p> <code>RequestError</code> <p>on other errors related with request processing.</p>"},{"location":"reference/gufo/http/sync_client/#gufo.http.sync_client.HttpClient.post","title":"<code>post(url, body, /, headers=None)</code>","text":"<p>Send HTTP POST request and receive a response.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>Request url, use <code>*</code> to get options for server.</p> required <code>body</code> <code>bytes</code> <p>Request body.</p> required <code>headers</code> <code>Optional[Dict[str, bytes]]</code> <p>Optional request headers.</p> <code>None</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response instance.</p> <p>Raises:</p> Type Description <code>TimeoutError</code> <p>on timeouts.</p> <code>ConnectionError</code> <p>when failed to establish connection.</p> <code>RedirectError</code> <p>when redirects limit reached.</p> <code>RequestError</code> <p>on other errors related with request processing.</p>"},{"location":"reference/gufo/http/sync_client/#gufo.http.sync_client.HttpClient.put","title":"<code>put(url, body, /, headers=None)</code>","text":"<p>Send HTTP PUT request and receive a response.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>Request url, use <code>*</code> to get options for server.</p> required <code>body</code> <code>bytes</code> <p>Request body.</p> required <code>headers</code> <code>Optional[Dict[str, bytes]]</code> <p>Optional request headers.</p> <code>None</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response instance.</p>"},{"location":"reference/gufo/http/sync_client/#gufo.http.sync_client.HttpClient.request","title":"<code>request(method, url, /, body=None, headers=None)</code>","text":"<p>Send HTTP request and receive a response.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>RequestMethod</code> <p>Request method</p> required <code>url</code> <code>str</code> <p>Request url</p> required <code>body</code> <code>Optional[bytes]</code> <p>Request body</p> <code>None</code> <code>headers</code> <code>Optional[Dict[str, bytes]]</code> <p>Optional request headers</p> <code>None</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response instance.</p> <p>Raises:</p> Type Description <code>TimeoutError</code> <p>on timeouts.</p> <code>ConnectionError</code> <p>when failed to establish connection.</p> <code>RedirectError</code> <p>when redirects limit reached.</p> <code>RequestError</code> <p>on other errors related with request processing.</p>"},{"location":"reference/gufo/http/util/","title":"gufo.http.util","text":"<p>Various utilities.</p>"},{"location":"reference/gufo/http/util/#gufo.http.util.merge_dict","title":"<code>merge_dict(x, y)</code>","text":"<p>Merge optional dicts of x and y.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Optional[Dict[str, bytes]]</code> <p>First dictionary.</p> required <code>y</code> <code>Optional[Dict[str, bytes]]</code> <p>Second dictionary.</p> required Return <ul> <li>None, if both dicts are empty.</li> <li>Resulting merging dict.</li> </ul>"}]}